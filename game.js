/* ===================== –ö–û–ù–§–ò–ì / –°–û–°–¢–û–Ø–ù–ò–ï ===================== */
const CATEGORIES = ['all','medicine','emotion','nature','resource','social','abstract'];
const CATEGORY_NAMES = { all:'–í–°–ï', medicine:'–ú–ï–î–ò–¶–ò–ù–ê', emotion:'–≠–ú–û–¶–ò–ò', nature:'–ü–†–ò–†–û–î–ê', resource:'–†–ï–°–£–†–°–´', social:'–û–ë–©–ï–°–¢–í–û', abstract:'–ê–ë–°–¢–†–ê–ö–¢' };

const DEFAULT_STATS = { health:65, food:55, safety:45, morale:50, trust:45 };
const STAT_EMOJIS = { health:'‚ù§Ô∏è', food:'üåæ', safety:'üõ°Ô∏è', morale:'üíö', trust:'ü§ù' };

let gameState = {
  mode:'campaign',
  day:1,
  stats:{...DEFAULT_STATS},
  currentVisitor:null,
  selectedWord:null,
  visitorsQueue:[],
  usedWords:new Set(),
  journal:[],
  canCreateNeologism:2,
  discoveredWords:[],
  roguelikeScore:0,
  ended:false,
  nightDecay:3,
  crisisFlags:{ epidemic:false, famine:false, unrest:false },
  wordsUsedToday:[],
  snapshot:{},
  pendingEvent:null,
  dayPhase:'idle',
  phaseTimeout:null,
  lastSummary:null
};

/* ===================== –ë–ê–ó–ê –°–õ–û–í ===================== */
const wordsDatabase = [
  { text:"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ", category:"medicine", id:"med1", tooltip:"–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ" },
  { text:"–ò—Å—Ü–µ–ª–µ–Ω–∏–µ", category:"medicine", id:"med2", tooltip:"–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ" },
  { text:"–¢—Ä–∞–≤—ã", category:"medicine", id:"med3", tooltip:"–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞" },
  { text:"–ü–µ—Ä–µ–≤—è–∑–∫–∞", category:"medicine", id:"med4", tooltip:"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–æ–≤–∏" },
  { text:"–ê–Ω—Ç–∏–¥–æ—Ç", category:"medicine", id:"med5", tooltip:"–ü—Ä–æ—Ç–∏–≤–æ—è–¥–∏–µ" },
  { text:"–ö–∞—Ä–∞–Ω—Ç–∏–Ω", category:"medicine", id:"med6", tooltip:"–ò–∑–æ–ª—è—Ü–∏—è –±–æ–ª—å–Ω—ã—Ö" },

  { text:"–ú—É–∂–µ—Å—Ç–≤–æ", category:"emotion", id:"emo1", tooltip:"–•—Ä–∞–±—Ä–æ—Å—Ç—å" },
  { text:"–ù–∞–¥–µ–∂–¥–∞", category:"emotion", id:"emo2", tooltip:"–í–µ—Ä–∞ –≤ –ª—É—á—à–µ–µ" },
  { text:"–ü–æ–∫–æ–π", category:"emotion", id:"emo3", tooltip:"–£–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ" },
  { text:"–ì–Ω–µ–≤", category:"emotion", id:"emo4", tooltip:"–Ø—Ä–æ—Å—Ç—å" },
  { text:"–†–∞–¥–æ—Å—Ç—å", category:"emotion", id:"emo5", tooltip:"–°—á–∞—Å—Ç—å–µ" },
  { text:"–õ—é–±–æ–≤—å", category:"emotion", id:"emo6", tooltip:"–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å" },
  { text:"–°—Ç—Ä–∞—Ö", category:"emotion", id:"emo7", tooltip:"–£–∂–∞—Å" },
  { text:"–û—Ç—á–∞—è–Ω–∏–µ", category:"emotion", id:"emo8", tooltip:"–ë–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å" },

  { text:"–î–æ–∂–¥—å", category:"nature", id:"nat1", tooltip:"–í–æ–¥–∞ —Å –Ω–µ–±–µ—Å" },
  { text:"–û–≥–æ–Ω—å", category:"nature", id:"nat2", tooltip:"–ü–ª–∞–º—è" },
  { text:"–í–æ–¥–∞", category:"nature", id:"nat3", tooltip:"–ò—Å—Ç–æ—á–Ω–∏–∫ –∂–∏–∑–Ω–∏" },
  { text:"–í–µ—Ç–µ—Ä", category:"nature", id:"nat4", tooltip:"–î–≤–∏–∂–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞" },
  { text:"–°–æ–ª–Ω—Ü–µ", category:"nature", id:"nat5", tooltip:"–°–≤–µ—Ç –∏ —Ç–µ–ø–ª–æ" },
  { text:"–ó–µ–º–ª—è", category:"nature", id:"nat6", tooltip:"–ü–æ—á–≤–∞" },
  { text:"–õ—ë–¥", category:"nature", id:"nat7", tooltip:"–•–æ–ª–æ–¥" },
  { text:"–¢—É–º–∞–Ω", category:"nature", id:"nat8", tooltip:"–°–æ–∫—Ä—ã—Ç–∏–µ" },

  { text:"–•–ª–µ–±", category:"resource", id:"res1", tooltip:"–û—Å–Ω–æ–≤–Ω–∞—è –ø–∏—â–∞" },
  { text:"–ó–µ—Ä–Ω–æ", category:"resource", id:"res2", tooltip:"–°–µ–º–µ–Ω–∞" },
  { text:"–£—Ä–æ–∂–∞–π", category:"resource", id:"res3", tooltip:"–ü–ª–æ–¥—ã —Ç—Ä—É–¥–∞" },
  { text:"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", category:"resource", id:"res4", tooltip:"–û—Ä—É–¥–∏—è" },
  { text:"–£–±–µ–∂–∏—â–µ", category:"resource", id:"res5", tooltip:"–ó–∞—â–∏—Ç–∞" },
  { text:"–û—Ä—É–∂–∏–µ", category:"resource", id:"res6", tooltip:"–°—Ä–µ–¥—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã" },

  { text:"–ú–∏—Ä", category:"social", id:"soc1", tooltip:"–°–æ–≥–ª–∞—Å–∏–µ" },
  { text:"–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", category:"social", id:"soc2", tooltip:"–ß–µ—Å—Ç–Ω–æ—Å—Ç—å" },
  { text:"–ó–∞–∫–æ–Ω", category:"social", id:"soc3", tooltip:"–ü–æ—Ä—è–¥–æ–∫" },
  { text:"–ï–¥–∏–Ω—Å—Ç–≤–æ", category:"social", id:"soc4", tooltip:"–°–ø–ª–æ—á–µ–Ω–Ω–æ—Å—Ç—å" },
  { text:"–ó–Ω–∞–Ω–∏–µ", category:"social", id:"soc5", tooltip:"–ú—É–¥—Ä–æ—Å—Ç—å" },
  { text:"–ü—Ä–∞–≤–¥–∞", category:"social", id:"soc6", tooltip:"–ò—Å—Ç–∏–Ω–∞" },

  { text:"–í—Ä–µ–º—è", category:"abstract", id:"abs1", tooltip:"–¢–µ—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π" },
  { text:"–¢–∏—à–∏–Ω–∞", category:"abstract", id:"abs2", tooltip:"–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–≤—É–∫–∞" },
  { text:"–°–≤–µ—Ç", category:"abstract", id:"abs3", tooltip:"–°–∏—è–Ω–∏–µ" },
  { text:"–°—É–¥—å–±–∞", category:"abstract", id:"abs4", tooltip:"–ü—Ä–µ–¥–Ω–∞—á–µ—Ä—Ç–∞–Ω–∏–µ" },
  { text:"–ü–∞–º—è—Ç—å", category:"abstract", id:"abs5", tooltip:"–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è" }
];

/* ===================== –ö–ê–ú–ü–ê–ù–ò–Ø / –°–û–ë–´–¢–ò–Ø ===================== */
const campaignEvents = {
  1:{ visitors:[
    { name:"–ó–Ω–∞—Ö–∞—Ä–∫–∞ –ú–∞—Ä—Ñ–∞", portrait:"üëµ", problem:"–ë–æ–ª–µ–∑–Ω—å", description:"–í –¥–µ—Ä–µ–≤–Ω–µ –Ω–∞—á–∞–ª–∞—Å—å <span class='problem-keyword'>–ë–æ–ª–µ–∑–Ω—å</span>. –õ—é–¥–∏ —Å–ª–∞–±–µ—é—Ç.", solutions:{
      "med1":{health:12,trust:5,message:"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –ø–æ–º–æ–≥–∞–µ—Ç –±–æ–ª—å–Ω—ã–º."},
      "med2":{health:18,trust:8,message:"–ò—Å—Ü–µ–ª–µ–Ω–∏–µ —Å–ø–∞—Å–∞–µ—Ç –º–Ω–æ–≥–∏—Ö!"},
      "med3":{health:6,message:"–¢—Ä–∞–≤—ã –æ–±–ª–µ–≥—á–∞—é—Ç —Å–∏–º–ø—Ç–æ–º—ã."},
      "med6":{health:10,safety:5,message:"–ö–∞—Ä–∞–Ω—Ç–∏–Ω —Å–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞—Ä–∞–∑—É."},
      "nat2":{health:-8,safety:-5,message:"–û–≥–æ–Ω—å?! –ü–∞–Ω–∏–∫–∞!"},
      "default":{health:-5,trust:-3,message:"–ë–æ–ª–µ–∑–Ω—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è..."}
    }},
    { name:"–ì–æ–ª–æ–¥–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫", portrait:"üë¶", problem:"–ì–æ–ª–æ–¥", description:"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å—Ç—å –Ω–µ—á–µ–≥–æ. <span class='problem-keyword'>–ì–æ–ª–æ–¥</span> –º—É—á–∞–µ—Ç.", solutions:{
      "res1":{food:8,morale:5,message:"–•–ª–µ–± —É—Ç–æ–ª—è–µ—Ç –≥–æ–ª–æ–¥."},
      "res2":{food:5,message:"–ó–µ—Ä–Ω–æ –¥–∞—Å—Ç –∫–∞—à—É."},
      "nat3":{food:2,health:2,message:"–í–æ–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ–º–Ω–æ–≥–æ."},
      "default":{food:-4,morale:-3,message:"–ì–æ–ª–æ–¥ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è..."}
    }}
  ]},
  2:{ visitors:[
    { name:"–§–µ—Ä–º–µ—Ä –ò–≤–∞–Ω", portrait:"üë®‚Äçüåæ", problem:"–ó–∞—Å—É—Ö–∞", description:"–ü–æ–ª—è –≥–∏–±–Ω—É—Ç! <span class='problem-keyword'>–ó–∞—Å—É—Ö–∞</span> —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç —É—Ä–æ–∂–∞–π!", solutions:{
      "nat1":{food:15,morale:8,trust:8,message:"–î–æ–∂–¥—å —Å–ø–∞—Å–∞–µ—Ç –ø–æ–ª—è!"},
      "nat3":{food:8,trust:4,message:"–í–æ–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ."},
      "res3":{food:12,message:"–£—Ä–æ–∂–∞–π —á—É–¥–µ—Å–Ω–æ —Å–æ–∑—Ä–µ–≤–∞–µ—Ç."},
      "nat2":{food:-12,safety:-8,message:"–û–≥–æ–Ω—å —Å–∂–∏–≥–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏!"},
      "default":{food:-6,morale:-4,message:"–ó–∞—Å—É—Ö–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è..."}
    }},
    { name:"–ò—Å–ø—É–≥–∞–Ω–Ω–∞—è –º–∞—Ç—å", portrait:"üë©", problem:"–°—Ç—Ä–∞—Ö", description:"–î–µ—Ç–∏ –±–æ—è—Ç—Å—è —Ç–µ–º–Ω–æ—Ç—ã. <span class='problem-keyword'>–°—Ç—Ä–∞—Ö</span> –Ω–µ –¥–∞—ë—Ç —Å–ø–∞—Ç—å.", solutions:{
      "emo1":{morale:10,trust:6,message:"–ú—É–∂–µ—Å—Ç–≤–æ –≤—Å–µ–ª—è–µ—Ç —Å–∏–ª—É."},
      "emo3":{morale:8,health:3,message:"–ü–æ–∫–æ–π —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç."},
      "abs3":{morale:6,safety:2,message:"–°–≤–µ—Ç –ø—Ä–æ–≥–æ–Ω—è–µ—Ç —Ç—å–º—É."},
      "emo7":{morale:-10,health:-5,message:"–°—Ç—Ä–∞—Ö —É—Å–∏–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ö!"},
      "default":{morale:-4,message:"–°—Ç—Ä–∞—Ö –æ—Å—Ç–∞—ë—Ç—Å—è..."}
    }},
    { name:"–°—Ç—Ä–∞–∂–Ω–∏–∫", portrait:"üíÇ", problem:"–£–≥—Ä–æ–∑–∞", description:"–ë–∞–Ω–¥–∏—Ç—ã —Ä—è–¥–æ–º! <span class='problem-keyword'>–£–≥—Ä–æ–∑–∞</span> –Ω–∞–ø–∞–¥–µ–Ω–∏—è!", solutions:{
      "res6":{safety:15,trust:8,message:"–û—Ä—É–∂–∏–µ –æ—Ç–ø—É–≥–∏–≤–∞–µ—Ç –≤—Ä–∞–≥–æ–≤."},
      "soc4":{safety:10,morale:8,message:"–ï–¥–∏–Ω—Å—Ç–≤–æ —É–∫—Ä–µ–ø–ª—è–µ—Ç –∑–∞—â–∏—Ç—É."},
      "nat8":{safety:8,message:"–¢—É–º–∞–Ω —Å–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Å–µ–ª–µ–Ω–∏–µ."},
      "emo7":{safety:-12,morale:-10,message:"–°—Ç—Ä–∞—Ö –≤—ã–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–∏–∫—É!"},
      "default":{safety:-8,morale:-4,message:"–£–≥—Ä–æ–∑–∞ —Ä–∞—Å—Ç—ë—Ç..."}
    }}
  ],
  event:{ type:"discovery", title:"–ù–∞–π–¥–µ–Ω —Å–≤–∏—Ç–æ–∫", description:"–í —Ä—É–∏–Ω–∞—Ö –Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞:", words:["–©–∏—Ç","–ú–æ–ª–æ—Ç","–ö–ª—é—á"], choose:1 } },
  3:{ visitors:[
    { name:"–°—Ç–∞—Ä–µ–π—à–∏–Ω–∞", portrait:"üë¥", problem:"–†–∞–∑–¥–æ—Ä", description:"–õ—é–¥–∏ —Å—Å–æ—Ä—è—Ç—Å—è –∏–∑-–∑–∞ –≤–æ–¥—ã. <span class='problem-keyword'>–†–∞–∑–¥–æ—Ä</span> —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç –æ–±—â–∏–Ω—É.", solutions:{
      "soc1":{safety:18,morale:12,trust:12,message:"–ú–∏—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"},
      "soc2":{safety:14,trust:10,message:"–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å —Ç–æ—Ä–∂–µ—Å—Ç–≤—É–µ—Ç."},
      "soc3":{safety:12,trust:8,message:"–ó–∞–∫–æ–Ω –Ω–∞–≤–æ–¥–∏—Ç –ø–æ—Ä—è–¥–æ–∫."},
      "nat2":{safety:-15,health:-10,message:"–û–≥–æ–Ω—å! –•–∞–æ—Å!"},
      "default":{safety:-8,morale:-6,message:"–†–∞–∑–¥–æ—Ä —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è..."}
    }},
    { name:"–ë–æ–ª—å–Ω–∞—è –∂–µ–Ω—â–∏–Ω–∞", portrait:"ü§í", problem:"–õ–∏—Ö–æ—Ä–∞–¥–∫–∞", description:"–ñ–∞—Ä –Ω–µ —Å–ø–∞–¥–∞–µ—Ç. <span class='problem-keyword'>–õ–∏—Ö–æ—Ä–∞–¥–∫–∞</span> —É–±–∏–≤–∞–µ—Ç.", solutions:{
      "med1":{health:10,trust:6,message:"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ —Å–Ω–∏–∂–∞–µ—Ç –∂–∞—Ä."},
      "med2":{health:15,trust:10,message:"–ò—Å—Ü–µ–ª–µ–Ω–∏–µ —Å–ø–∞—Å–∞–µ—Ç –∂–∏–∑–Ω—å!"},
      "nat7":{health:4,message:"–õ—ë–¥ –æ–±–ª–µ–≥—á–∞–µ—Ç –∂–∞—Ä."},
      "default":{health:-8,trust:-4,message:"–õ–∏—Ö–æ—Ä–∞–¥–∫–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è..."}
    }},
    { name:"–¢–æ—Ä–≥–æ–≤–µ—Ü", portrait:"üßî", problem:"–û–±–º–∞–Ω", description:"–ú–µ–Ω—è –æ–±–≤–∏–Ω—è—é—Ç –≤ <span class='problem-keyword'>–û–±–º–∞–Ω–µ</span>. –≠—Ç–æ –ª–æ–∂—å!", solutions:{
      "soc6":{trust:12,morale:8,message:"–ü—Ä–∞–≤–¥–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞!"},
      "soc2":{trust:10,safety:5,message:"–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ–≤–∞–ª–∞."},
      "emo4":{trust:-8,safety:-10,message:"–ì–Ω–µ–≤ —Ä–∞–∑–∂–∏–≥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç!"},
      "default":{trust:-6,morale:-4,message:"–ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è..."}
    }},
    { name:"–ë–µ–∂–µ–Ω—Ü—ã", portrait:"üë®‚Äçüë©‚Äçüëß", problem:"–ò–∑–≥–Ω–∞–Ω–∏–µ", description:"–ù–∞—Å –ø—Ä–æ–≥–Ω–∞–ª–∏. <span class='problem-keyword'>–ò–∑–≥–Ω–∞–Ω–∏–µ</span> ‚Äî –Ω–∞—à–∞ —Å—É–¥—å–±–∞.", solutions:{
      "res5":{safety:8,morale:10,trust:8,message:"–£–±–µ–∂–∏—â–µ –¥–∞—ë—Ç –ø—Ä–∏—é—Ç."},
      "emo6":{morale:12,trust:10,message:"–õ—é–±–æ–≤—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ—Ö."},
      "soc4":{morale:10,safety:6,message:"–ï–¥–∏–Ω—Å—Ç–≤–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç."},
      "default":{morale:-6,trust:-4,message:"–ë–µ–∂–µ–Ω—Ü—ã —É—Ö–æ–¥—è—Ç..."}
    }}
  ]},
  4:{ visitors:[
    { name:"–ü—Ä–æ—Ä–æ–∫", portrait:"üîÆ", problem:"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", description:"–í–∏–∂—É —Ç—å–º—É –≤–ø–µ—Ä–µ–¥–∏. <span class='problem-keyword'>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</span> –º—Ä–∞—á–Ω–æ.", solutions:{
      "abs4":{morale:-5,trust:8,message:"–°—É–¥—å–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ —Å –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º."},
      "emo2":{morale:12,trust:10,message:"–ù–∞–¥–µ–∂–¥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –º—Ä–∞–∫!"},
      "abs2":{morale:-15,health:-8,message:"–¢–∏—à–∏–Ω–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ö..."},
      "default":{morale:-8,trust:-4,message:"–ú—Ä–∞—á–Ω—ã–µ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏—è..."}
    }},
    { name:"–†–∞–Ω–µ–Ω—ã–π –≤–æ–∏–Ω", portrait:"ü§ï", problem:"–†–∞–Ω–∞", description:"–ì–ª—É–±–æ–∫–∞—è <span class='problem-keyword'>–†–∞–Ω–∞</span>. –ö—Ä–æ–≤—å –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.", solutions:{
      "med4":{health:12,trust:8,message:"–ü–µ—Ä–µ–≤—è–∑–∫–∞ —Å–ø–∞—Å–∞–µ—Ç –∂–∏–∑–Ω—å."},
      "med2":{health:18,trust:12,message:"–ò—Å—Ü–µ–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–Ω—É!"},
      "nat7":{health:4,message:"–õ—ë–¥ –∑–∞–º–µ–¥–ª—è–µ—Ç –∫—Ä–æ–≤—å."},
      "nat2":{health:-10,trust:-8,message:"–û–≥–æ–Ω—å?! –ê–≥–æ–Ω–∏—è!"},
      "default":{health:-10,message:"–†–∞–Ω–∞ –∫—Ä–æ–≤–æ—Ç–æ—á–∏—Ç..."}
    }},
    { name:"–ö—É–ª—å—Ç–∏—Å—Ç", portrait:"üë§", problem:"–ï—Ä–µ—Å—å", description:"–°–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –∏—Å—á–µ–∑–Ω—É—Ç—å! <span class='problem-keyword'>–ï—Ä–µ—Å—å</span> ‚Äî —ç—Ç–æ —Å–ø–∞—Å–µ–Ω–∏–µ!", solutions:{
      "soc5":{trust:15,morale:10,message:"–ó–Ω–∞–Ω–∏–µ —Ä–∞–∑–≤–µ–∏–≤–∞–µ—Ç –ª–æ–∂—å."},
      "soc6":{trust:12,safety:8,message:"–ü—Ä–∞–≤–¥–∞ —Ä–∞–∑–æ–±–ª–∞—á–∞–µ—Ç –∫—É–ª—å—Ç."},
      "abs2":{trust:-20,morale:-15,message:"–¢–∏—à–∏–Ω–∞... –ö—É–ª—å—Ç–∏—Å—Ç —Ç–æ—Ä–∂–µ—Å—Ç–≤—É–µ—Ç!"},
      "default":{trust:-8,safety:-6,message:"–ï—Ä–µ—Å—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è..."}
    }},
    { name:"–£–º–∏—Ä–∞—é—â–∏–π —Å—Ç–∞—Ä–∏–∫", portrait:"üë¥", problem:"–ó–∞–±–≤–µ–Ω–∏–µ", description:"–ü–∞–º—è—Ç—å —É—Ö–æ–¥–∏—Ç. <span class='problem-keyword'>–ó–∞–±–≤–µ–Ω–∏–µ</span> –±–ª–∏–∑–∫–æ.", solutions:{
      "abs5":{morale:15,trust:12,message:"–ü–∞–º—è—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è!"},
      "soc5":{morale:12,trust:10,message:"–ó–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑—É–º."},
      "abs1":{morale:8,message:"–í—Ä–µ–º—è –¥–∞—ë—Ç –ø–æ–∫–æ–π."},
      "default":{morale:-8,trust:-4,message:"–ó–∞–±–≤–µ–Ω–∏–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç..."}
    }}
  ],
  event:{ type:"discovery", title:"–¢–∞–π–Ω–∏–∫", description:"–í –ø–æ–¥–≤–∞–ª–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞:", words:["–í—Ä–∞—Ç–∞","–ö–ª–∏–Ω–æ–∫","–ü–µ—á–∞—Ç—å"], choose:2 } },
  5:{ visitors:[
    { name:"–ü—Ä–æ—Ä–æ–∫ –ë–µ–∑–º–æ–ª–≤–∏—è", portrait:"‚ö´", problem:"–ö–æ–Ω–µ—Ü", description:"–ü—Ä–∏—à—ë–ª —á–∞—Å. <span class='problem-keyword'>–ö–æ–Ω–µ—Ü</span> –≤—Å–µ—Ö —Å–ª–æ–≤.", solutions:{
      "soc5":{health:25,food:25,safety:25,morale:25,trust:30,message:"–ó–Ω–∞–Ω–∏–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç —Ç—å–º—É! –ú–∏—Ä —Å–ø–∞—Å—ë–Ω!"},
      "emo2":{morale:20,trust:15,message:"–ù–∞–¥–µ–∂–¥–∞ —Å–æ–∑–¥–∞—ë—Ç –±–∞—Ä—å–µ—Ä!"},
      "emo6":{health:15,morale:20,trust:15,message:"–õ—é–±–æ–≤—å –∑–∞—â–∏—â–∞–µ—Ç!"},
      "abs2":{health:-40,food:-40,safety:-40,morale:-40,trust:-40,message:"–¢–∏—à–∏–Ω–∞... –ö–æ–Ω–µ—Ü –≤—Å–µ–≥–æ..."},
      "nat2":{safety:-25,health:-20,message:"–û–≥–æ–Ω—å —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É!"},
      "default":{health:-20,food:-20,safety:-20,morale:-20,trust:-20,message:"–¢—å–º–∞ –ø–æ–≥–ª–æ—â–∞–µ—Ç –º–∏—Ä..."}
    }},
    { name:"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏–µ", portrait:"üë•", problem:"–û—Ç—á–∞—è–Ω–∏–µ", description:"–í—Å—ë –∫–æ–Ω—á–µ–Ω–æ. <span class='problem-keyword'>–û—Ç—á–∞—è–Ω–∏–µ</span> –≤ —Å–µ—Ä–¥—Ü–∞—Ö.", solutions:{
      "emo2":{morale:18,trust:12,message:"–ù–∞–¥–µ–∂–¥–∞ –≤–æ–∑—Ä–æ–∂–¥–∞–µ—Ç—Å—è!"},
      "emo5":{morale:15,health:8,message:"–†–∞–¥–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–ª—ã."},
      "emo8":{morale:-20,health:-15,message:"–û—Ç—á–∞—è–Ω–∏–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç –æ—Ç—á–∞—è–Ω–∏–µ!"},
      "default":{morale:-12,health:-8,message:"–û—Ç—á–∞—è–Ω–∏–µ —Ä–∞—Å—Ç—ë—Ç..."}
    }}
  ]},
  6:{ visitors:[
    { name:"–≠–ø–∏–¥–µ–º–∏—è", portrait:"‚ò†Ô∏è", problem:"–ß—É–º–∞", description:"–ß—ë—Ä–Ω–∞—è —Å–º–µ—Ä—Ç—å. <span class='problem-keyword'>–ß—É–º–∞</span> –∫–æ—Å–∏—Ç –≤—Å–µ—Ö.", solutions:{
      "med6":{health:15,safety:10,message:"–ö–∞—Ä–∞–Ω—Ç–∏–Ω —Å–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á—É–º—É."},
      "med2":{health:20,trust:15,message:"–ò—Å—Ü–µ–ª–µ–Ω–∏–µ —Å–ø–∞—Å–∞–µ—Ç –º–Ω–æ–≥–∏—Ö!"},
      "nat2":{health:-30,safety:-20,message:"–û–≥–æ–Ω—å?! –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞!"},
      "default":{health:-15,trust:-8,message:"–ß—É–º–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è..."}
    }}
  ]}
};

/* ===================== –£–¢–ò–õ–ò–¢–´ –°–ï–ô–í–û–í ===================== */
function hasSave(){ return !!localStorage.getItem('librarian_save'); }
function saveGame(){
  const save = {
    mode:gameState.mode, day:gameState.day, stats:gameState.stats,
    usedWords:[...gameState.usedWords], discoveredWords:gameState.discoveredWords,
    canCreateNeologism:gameState.canCreateNeologism, roguelikeScore:gameState.roguelikeScore
  };
  localStorage.setItem('librarian_save', JSON.stringify(save));
}
function continueGame(){
  const raw = localStorage.getItem('librarian_save'); if (!raw) return;
  const data = JSON.parse(raw);
  resetGame();
  Object.assign(gameState, {
    mode:data.mode||'campaign', day:data.day||1, stats:data.stats||{...DEFAULT_STATS},
    usedWords:new Set(data.usedWords||[]), discoveredWords:data.discoveredWords||[],
    canCreateNeologism: data.canCreateNeologism ?? 2, roguelikeScore:data.roguelikeScore||0
  });
  gameState.snapshot = JSON.parse(JSON.stringify(gameState.stats));
  gameState.wordsUsedToday = [];
  gameState.pendingEvent = null;
  gameState.dayPhase = 'idle';
  gameState.phaseTimeout = null;
  gameState.lastSummary = null;
  enterGame(); startDay();
}

/* ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===================== */
function init(){
  createParticles();
  if (hasSave()) document.getElementById('continue-btn').style.display='block';
  document.getElementById('word-search').addEventListener('input', e=>{
    const active = document.querySelector('.category-tab.active')?.dataset.category || 'all';
    renderWords(active, e.target.value);
  });
  document.addEventListener('keydown', e=>{
    if (e.key==='Escape') closeModal();
    if (e.key>='1' && e.key<='7'){ const idx=parseInt(e.key)-1; if (CATEGORIES[idx]) filterByCategory(CATEGORIES[idx]); }
    if (e.key==='Enter'){
      const btn = document.getElementById('give-word-btn');
      if (btn && !btn.disabled) giveWord();
    }
  });
}
window.addEventListener('DOMContentLoaded', init);

function createParticles(){
  for (let i=0;i<15;i++){
    const p=document.createElement('div'); p.className='ash-particle';
    p.style.left = Math.random()*100 + '%';
    p.style.animationDelay = Math.random()*12 + 's';
    p.style.animationDuration = (10 + Math.random()*8) + 's';
    document.body.appendChild(p);
  }
}

/* ===================== –°–¢–ê–†–¢ / –°–ë–†–û–° ===================== */
function startCampaign(){ resetGame(); gameState.mode='campaign'; enterGame(); startDay(); }
function startRoguelike(){ resetGame(); gameState.mode='roguelike'; gameState.nightDecay=5; enterGame(); startDay(); }
function resetGame(){
  gameState = {
    mode:'campaign', day:1, stats:{...DEFAULT_STATS}, currentVisitor:null, selectedWord:null,
    visitorsQueue:[], usedWords:new Set(), journal:[], canCreateNeologism:2, discoveredWords:[],
    roguelikeScore:0, ended:false, nightDecay:3, crisisFlags:{epidemic:false,famine:false,unrest:false},
    wordsUsedToday:[], snapshot:{},
    pendingEvent:null, dayPhase:'idle', phaseTimeout:null, lastSummary:null
  };
}
function enterGame(){
  document.getElementById('main-menu').style.opacity='0';
  setTimeout(()=>{
    document.getElementById('main-menu').style.display='none';
    document.getElementById('game-container').classList.add('visible');
    renderCategories(); renderWords(); updateStats(); updateWordCount();
  }, 1000);
}

/* ===================== –î–ï–ù–¨ / –ö–†–ò–ó–ò–°–´ ===================== */
function clearPhaseTimer(){
  if (gameState.phaseTimeout){
    clearTimeout(gameState.phaseTimeout);
    gameState.phaseTimeout = null;
  }
}

function startDay(){
  clearPhaseTimer();
  gameState.dayPhase = 'morning';
  gameState.currentVisitor = null;
  gameState.selectedWord = null;
  gameState.pendingEvent = null;
  gameState.visitorsQueue = [];
  updateQueueIndicator();
  const box = document.getElementById('visitor-content');
  if (box) box.innerHTML = '';
  const eveningScreen = document.getElementById('evening-summary-screen');
  if (eveningScreen) eveningScreen.classList.remove('active');
  const eveningText = document.getElementById('evening-summary-text');
  if (eveningText) eveningText.textContent = '';
  const eveningMetrics = document.getElementById('evening-summary-metrics');
  if (eveningMetrics) eveningMetrics.innerHTML = '';
  const nextBtn = document.getElementById('next-day-btn');
  if (nextBtn) nextBtn.style.display = 'none';
  checkCanGiveWord();
  morningBriefing();
}

function morningBriefing(){
  const screen = document.getElementById('morning-briefing');
  const textEl = document.getElementById('morning-briefing-text');
  const metricsEl = document.getElementById('morning-briefing-metrics');
  const button = document.getElementById('begin-triage-btn');

  if (!screen || !textEl || !metricsEl || !button){
    triageQueue();
    return;
  }

  screen.classList.add('active');
  button.disabled = false;
  button.textContent = '–ù–ê–ß–ê–¢–¨ –ü–†–ò–Å–ú';
  button.onclick = ()=>{
    button.disabled = true;
    triageQueue();
  };

  gameState.snapshot = JSON.parse(JSON.stringify(gameState.stats));
  gameState.wordsUsedToday = [];

  if (gameState.day>1) applyNightDecay();
  checkCrises();
  updateStats();
  updateDayInfo();

  const lines = [];
  const last = gameState.lastSummary;
  if (last){
    const deltaLine = last.deltaParts && last.deltaParts.length ? last.deltaParts.join(' ‚Ä¢ ') : '‚Äî';
    const wordsLine = last.wordsUsed && last.wordsUsed.length ? last.wordsUsed.join(', ') : '‚Äî';
    lines.push(`üìä –í—á–µ—Ä–∞: ${deltaLine}`);
    lines.push(`üìù –°–ª–æ–≤–∞: <span>${last.wordsUsed.length}</span>${wordsLine==='‚Äî' ? '' : ' ‚Äî ' + wordsLine}`);
  } else {
    lines.push('üìù –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –ø—Ä–æ—à–ª—ã—Ö –¥–Ω–µ–π.');
  }

  const crisisNames = [];
  if (gameState.crisisFlags.epidemic) crisisNames.push('–≠–ø–∏–¥–µ–º–∏—è');
  if (gameState.crisisFlags.famine) crisisNames.push('–ì–æ–ª–æ–¥');
  if (gameState.crisisFlags.unrest) crisisNames.push('–ë–µ—Å–ø–æ—Ä—è–¥–∫–∏');
  lines.push(`‚ö†Ô∏è –ö—Ä–∏–∑–∏—Å—ã: ${crisisNames.length ? `<span>${crisisNames.join(' ‚Ä¢ ')}</span>` : '‚Äî'}`);

  const statSummary = Object.keys(gameState.stats).map(stat=>`${STAT_EMOJIS[stat]||''} ${gameState.stats[stat]}`).join(' ‚Ä¢ ');
  lines.push(`üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏: ${statSummary}`);

  metricsEl.innerHTML = lines.map(line=>`<div>${line}</div>`).join('');
  textEl.innerHTML = `–î–µ–Ω—å ${gameState.day} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–∏—ë–º—É –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π.`;
}

function triageQueue(){
  clearPhaseTimer();
  gameState.dayPhase = 'triage';
  const screen = document.getElementById('morning-briefing');
  const textEl = document.getElementById('morning-briefing-text');
  const metricsEl = document.getElementById('morning-briefing-metrics');
  const button = document.getElementById('begin-triage-btn');

  if (button){
    button.textContent = '–ü–û–î–ì–û–¢–û–í–ö–ê...';
    button.disabled = true;
  }
  if (textEl) textEl.textContent = '–°–æ—Å—Ç–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π...';
  if (metricsEl) metricsEl.innerHTML = '';

  gameState.visitorsQueue = [];
  gameState.currentVisitor = null;
  gameState.pendingEvent = null;

  const notes = [];
  let queueCount = 0;

  if (gameState.mode==='campaign'){
    const dayData = campaignEvents[gameState.day];
    if (!dayData){
      if (screen) screen.classList.remove('active');
      victory();
      return;
    }
    gameState.visitorsQueue = [...dayData.visitors];
    gameState.pendingEvent = dayData.event || null;
    queueCount = gameState.visitorsQueue.length;

    if (gameState.crisisFlags.epidemic){
      gameState.visitorsQueue.push({ name:"–ë–æ–ª—å–Ω—ã–µ", portrait:"ü§¢", problem:"–≠–ø–∏–¥–µ–º–∏—è", description:"<span class='problem-keyword'>–≠–ø–∏–¥–µ–º–∏—è</span> –Ω–µ –æ—Ç—Å—Ç—É–ø–∞–µ—Ç!", solutions:{
        "med6":{health:10,message:"–ö–∞—Ä–∞–Ω—Ç–∏–Ω –ø–æ–º–æ–≥–∞–µ—Ç."}, "med2":{health:15,message:"–ò—Å—Ü–µ–ª–µ–Ω–∏–µ —Å–ø–∞—Å–∞–µ—Ç –±–æ–ª—å–Ω—ã—Ö."}, "default":{health:-8,message:"–ë–æ–ª–µ–∑–Ω—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è..."}
      }});
      notes.push('ü§¢ –≠–ø–∏–¥–µ–º–∏—è –ø—Ä–∏–≤–µ–ª–∞ –Ω–æ–≤—ã—Ö –±–æ–ª—å–Ω—ã—Ö.');
    }
    if (gameState.crisisFlags.famine){
      gameState.visitorsQueue.push({ name:"–ì–æ–ª–æ–¥–∞—é—â–∏–µ", portrait:"üçû", problem:"–ì–æ–ª–æ–¥", description:"–ú–∞—Å—Å–æ–≤—ã–π <span class='problem-keyword'>–ì–æ–ª–æ–¥</span>!", solutions:{
        "res1":{food:10,message:"–•–ª–µ–± —Å–ø–∞—Å–∞–µ—Ç –æ—Ç –≥–æ–ª–æ–¥–∞."}, "res3":{food:15,message:"–£—Ä–æ–∂–∞–π –∫–æ—Ä–º–∏—Ç –≤—Å–µ—Ö."}, "default":{food:-8,morale:-5,message:"–ì–æ–ª–æ–¥ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è..."}
      }});
      notes.push('üçû –ì–æ–ª–æ–¥—è—â–∏–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–º–æ—â–∏.');
    }
    if (gameState.crisisFlags.unrest){
      gameState.visitorsQueue.push({ name:"–ù–µ–¥–æ–≤–æ–ª—å–Ω—ã–µ", portrait:"üó£Ô∏è", problem:"–ë–µ—Å–ø–æ—Ä—è–¥–∫–∏", description:"–°—Å–æ—Ä—ã –∏ –¥—Ä–∞–∫–∏ —É—Å–∏–ª–∏–≤–∞—é—Ç—Å—è!", solutions:{
        "soc1":{safety:12,morale:8,trust:6,message:"–ú–∏—Ä–æ—Ç–≤–æ—Ä—Ü—ã —É—Å–ø–æ–∫–∞–∏–≤–∞—é—Ç —Å–ø–æ—Ä."}, "soc2":{safety:10,trust:6,message:"–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ."}, "default":{safety:-6,morale:-4,message:"–†—É–≥–∞–Ω—å –Ω–µ —Å–º–æ–ª–∫–∞–µ—Ç..."}
      }});
      notes.push('üó£Ô∏è –£—Å–∏–ª–µ–Ω—ã –º–µ—Ä—ã –ø—Ä–æ—Ç–∏–≤ –±–µ—Å–ø–æ—Ä—è–¥–∫–æ–≤.');
    }
    queueCount = gameState.visitorsQueue.length;
    updateDayInfo();
  } else {
    generateRoguelikeDay(false);
    queueCount = gameState.visitorsQueue.length;
    notes.push('üé≤ –†–æ–≥–∞–ª–∏–∫–æ–≤—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π.');
  }

  updateQueueIndicator();
  checkCanGiveWord();

  if (metricsEl){
    const lines = [`üë• –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: <span>${queueCount}</span>`];
    notes.forEach(note=>lines.push(note));
    metricsEl.innerHTML = lines.map(line=>`<div>${line}</div>`).join('');
  }

  gameState.phaseTimeout = setTimeout(()=>{
    if (screen) screen.classList.remove('active');
    interactionPhase();
  }, 1200);
}

function interactionPhase(){
  clearPhaseTimer();
  gameState.dayPhase = 'interaction';
  const morningScreen = document.getElementById('morning-briefing');
  if (morningScreen) morningScreen.classList.remove('active');

  const eveningScreen = document.getElementById('evening-summary-screen');
  if (eveningScreen) eveningScreen.classList.remove('active');

  const nextBtn = document.getElementById('next-day-btn');
  if (nextBtn) nextBtn.style.display = 'none';

  const eveningText = document.getElementById('evening-summary-text');
  if (eveningText) eveningText.textContent = '';
  const eveningMetrics = document.getElementById('evening-summary-metrics');
  if (eveningMetrics) eveningMetrics.innerHTML = '';

  const box = document.getElementById('visitor-content');
  if (box) box.innerHTML = '';

  if (gameState.mode==='campaign'){
    const dayData = campaignEvents[gameState.day];
    if (!dayData){ victory(); return; }
    updateDayInfo();
    if (gameState.pendingEvent){
      showDiscoveryModal(gameState.pendingEvent);
      gameState.pendingEvent = null;
    } else {
      showNextVisitor();
    }
  } else {
    if (!gameState.visitorsQueue.length){
      generateRoguelikeDay(false);
    }
    updateDayInfo();
    showNextVisitor();
  }
}

function calculateDayDelta(){
  const snapshot = gameState.snapshot || {};
  const delta = {};
  Object.keys(gameState.stats).forEach(stat=>{
    delta[stat] = (gameState.stats[stat]||0) - (snapshot[stat]||0);
  });
  const deltaParts = Object.keys(delta).map(stat=>{
    const value = delta[stat];
    if (!value) return '';
    const icon = STAT_EMOJIS[stat] || '';
    return `${icon} ${value>0?'+':''}${value}`;
  }).filter(Boolean);
  return { delta, deltaParts };
}

function eveningSummary(){
  clearPhaseTimer();
  gameState.dayPhase = 'evening';
  gameState.currentVisitor = null;
  gameState.visitorsQueue = [];
  updateQueueIndicator();
  checkCanGiveWord();

  const { delta, deltaParts } = calculateDayDelta();
  const wordsUsed = [...gameState.wordsUsedToday];
  const wordsLine = wordsUsed.length ? wordsUsed.join(', ') : '';

  const summaryText = document.getElementById('evening-summary-text');
  if (summaryText) summaryText.innerHTML = `–î–µ–Ω—å ${gameState.day} –∑–∞–≤–µ—Ä—à—ë–Ω.`;

  const metricsEl = document.getElementById('evening-summary-metrics');
  if (metricsEl){
    const lines = [
      `üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è: ${deltaParts.length ? deltaParts.join(' ‚Ä¢ ') : '‚Äî'}`,
      `üìù –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–ª–æ–≤: <span>${wordsUsed.length}</span>${wordsLine ? ' ‚Äî ' + wordsLine : ''}`
    ];
    if (gameState.mode==='roguelike'){
      lines.push(`üéØ –°—á—ë—Ç: <span>${gameState.roguelikeScore}</span>`);
    }
    metricsEl.innerHTML = lines.map(line=>`<div>${line}</div>`).join('');
  }

  const nextBtn = document.getElementById('next-day-btn');
  if (nextBtn){
    nextBtn.style.display = 'inline-block';
    nextBtn.textContent = `–ö –î–ù–Æ ${gameState.day+1}`;
  }

  const eveningScreen = document.getElementById('evening-summary-screen');
  if (eveningScreen) eveningScreen.classList.add('active');

  const box = document.getElementById('visitor-content');
  if (box) box.innerHTML = '';

  gameState.lastSummary = {
    day: gameState.day,
    delta,
    deltaParts,
    wordsUsed,
    roguelikeScore: gameState.roguelikeScore
  };

  saveGame();
}


function applyNightDecay(){
  Object.keys(gameState.stats).forEach(stat=>{
    const decay = Math.floor(Math.random()*gameState.nightDecay)+1;
    gameState.stats[stat] = Math.max(0, gameState.stats[stat]-decay);
  });
  addToJournal(`–ù–æ—á—å –ø—Ä–æ—à–ª–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ. –ü–æ—Å–µ–ª–µ–Ω–∏–µ –æ—Å–ª–∞–±–ª–æ.`);
  updateStats();
  showNotification("–ù–æ—á–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–Ω–∏–∂–µ–Ω—ã");
}
function checkCrises(){
  if (gameState.stats.health < 40 && !gameState.crisisFlags.epidemic){ gameState.crisisFlags.epidemic = true; showNotification("‚ö†Ô∏è –≠–ü–ò–î–ï–ú–ò–Ø –Ω–∞—á–∞–ª–∞—Å—å –≤ –ø–æ—Å–µ–ª–µ–Ω–∏–∏!"); }
  if (gameState.stats.food   < 35 && !gameState.crisisFlags.famine)  { gameState.crisisFlags.famine  = true; showNotification("‚ö†Ô∏è –ì–û–õ–û–î –æ—Ö–≤–∞—Ç–∏–ª –ø–æ—Å–µ–ª–µ–Ω–∏–µ!"); }
  if (gameState.stats.safety < 35 && !gameState.crisisFlags.unrest)  { gameState.crisisFlags.unrest  = true; showNotification("‚ö†Ô∏è –ë–ï–°–ü–û–†–Ø–î–ö–ò –Ω–∞—á–∞–ª–∏—Å—å!"); }
}
function showNotification(text){
  const n=document.createElement('div'); n.className='event-notification'; n.textContent=text; document.body.appendChild(n); setTimeout(()=>n.remove(), 3000);
}

/* ===================== –†–û–ì–ê–õ–ò–ö ===================== */
function generateRoguelikeDay(autoStart=true){
  const count = Math.min(2 + Math.floor(gameState.day/2), 5);
  gameState.visitorsQueue = [];
  const problems = [
    { name:"–ë–æ–ª—å–Ω–æ–π", portrait:"ü§í", problem:"–ë–æ–ª–µ–∑–Ω—å", stat:"health" },
    { name:"–ì–æ–ª–æ–¥–Ω—ã–π", portrait:"üòî", problem:"–ì–æ–ª–æ–¥",   stat:"food" },
    { name:"–ò—Å–ø—É–≥–∞–Ω–Ω—ã–π", portrait:"üò∞", problem:"–°—Ç—Ä–∞—Ö", stat:"morale" },
    { name:"–†–∞–Ω–µ–Ω—ã–π", portrait:"ü©∏", problem:"–†–∞–Ω–∞",     stat:"health" },
    { name:"–°–ø–æ—Ä—â–∏–∫", portrait:"üò§", problem:"–°–ø–æ—Ä",     stat:"safety" }
  ];
  for (let i=0;i<count;i++){
    const p = problems[Math.floor(Math.random()*problems.length)];
    gameState.visitorsQueue.push({
      ...p, description:`–ü—Ä–æ–±–ª–µ–º–∞: <span class='problem-keyword'>${p.problem}</span>`, solutions: generateRoguelikeSolutions(p.stat)
    });
  }
  updateDayInfo();
  if (autoStart) showNextVisitor();
}
function generateRoguelikeSolutions(mainStat){
  const solutions = {};
  const availableWords = [...wordsDatabase, ...gameState.discoveredWords].filter(w=>!gameState.usedWords.has(w.id));
  const picks = availableWords.slice(0, Math.min(5, availableWords.length));
  picks.forEach(word=>{
    const eff = {};
    if (word.category==='medicine' && mainStat==='health') eff.health = 10 + Math.floor(Math.random()*8);
    else if (word.category==='resource' && mainStat==='food') eff.food = 10 + Math.floor(Math.random()*8);
    else if (word.category==='social' && mainStat==='safety') eff.safety = 10 + Math.floor(Math.random()*8);
    else if (word.category==='emotion' && mainStat==='morale') eff.morale = 10 + Math.floor(Math.random()*8);
    else eff[mainStat] = 3 + Math.floor(Math.random()*5);
    eff.message = "–°–ª–æ–≤–æ –ø–æ–º–æ–≥–∞–µ—Ç.";
    solutions[word.id] = eff;
  });
  solutions.default = { [mainStat]: -5 - Math.floor(Math.random()*5), message:"–ü—Ä–æ–±–ª–µ–º–∞ —É—Å—É–≥—É–±–ª—è–µ—Ç—Å—è..." };
  return solutions;
}

/* ===================== UI: –î–ï–ù–¨ / –ü–û–°–ï–¢–ò–¢–ï–õ–ò ===================== */
function updateDayInfo(){
  document.getElementById('day-number').textContent = gameState.day;
  if (gameState.mode==='roguelike') document.getElementById('day-description').textContent = `–°—á—ë—Ç: ${gameState.roguelikeScore}`;
  else {
    const desc = {1:"–ü–µ—Ä–≤—ã–µ –ø—Ä–æ—Å–∏—Ç–µ–ª–∏ —É –ø–æ—Ä–æ–≥–∞...",2:"–ë–µ–¥—ã –º–Ω–æ–∂–∞—Ç—Å—è, —Å–ª–æ–≤–∞ —Ç–∞—é—Ç...",3:"–ö—Ä–∏–∑–∏—Å —É–≥–ª—É–±–ª—è–µ—Ç—Å—è...",4:"–¢–µ–Ω–∏ —Å–≥—É—â–∞—é—Ç—Å—è –Ω–∞–¥ –ø–æ—Å–µ–ª–µ–Ω–∏–µ–º...",5:"–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ...",6:"–ü–æ—Å–ª–µ–¥–Ω—è—è –±–∏—Ç–≤–∞ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ..."};
    document.getElementById('day-description').textContent = desc[gameState.day] || "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...";
  }
}
function updateStats(){
  Object.keys(gameState.stats).forEach(stat=>{
    const value = gameState.stats[stat];
    document.getElementById(`${stat}-value`).textContent = value;
    const el = document.querySelector(`[data-stat="${stat}"]`);
    el.querySelector('.stat-fill').style.width = `${value}%`;
    if (value<=10){ el.classList.add('critical'); el.classList.add('warning'); }
    else if (value<=25){ el.classList.remove('critical'); el.classList.add('warning'); }
    else { el.classList.remove('critical'); el.classList.remove('warning'); }
    if (value<=0 && !gameState.ended){ gameOver(stat); }
  });
}
function updateWordCount(){
  const total = wordsDatabase.length + gameState.discoveredWords.length;
  const available = total - gameState.usedWords.size;
  document.getElementById('word-count').textContent = `–î–æ—Å—Ç—É–ø–Ω–æ: ${available} –∏–∑ ${total}`;
  document.getElementById('neo-count').textContent = gameState.canCreateNeologism;
}

function showNextVisitor(){
  updateQueueIndicator();
  if (gameState.visitorsQueue.length===0){ endDay(); return; }
  const v = gameState.visitorsQueue.shift();
  gameState.currentVisitor = v;

  const box = document.getElementById('visitor-content');
  box.innerHTML = `
    <div class="visitor">
      <div class="visitor-portrait" id="visitor-portrait" onclick="selectVisitor()">${v.portrait}</div>
      <div class="visitor-name">${v.name}</div>
      <div class="visitor-problem">${v.description}</div>
    </div>
  `;

  const portrait = document.getElementById('visitor-portrait');
  portrait.addEventListener('dragover', e=>{ e.preventDefault(); portrait.classList.add('selected'); });
  portrait.addEventListener('drop', e=>{
    e.preventDefault();
    const wordId = e.dataTransfer.getData('text/plain');
    const word = [...wordsDatabase, ...gameState.discoveredWords].find(w=>w.id===wordId);
    if (word && !gameState.usedWords.has(wordId)){
      gameState.selectedWord = word; portrait.classList.add('selected'); giveWord();
    }
  });
  checkCanGiveWord();
}
function selectVisitor(){ document.getElementById('visitor-portrait').classList.add('selected'); checkCanGiveWord(); }
function updateQueueIndicator(){
  const q=document.getElementById('visitors-queue'); q.innerHTML='';
  const total = gameState.visitorsQueue.length + (gameState.currentVisitor?1:0);
  for (let i=0;i<total;i++){ const d=document.createElement('div'); d.className='queue-indicator'; if (i===0 && gameState.currentVisitor) d.classList.add('active'); q.appendChild(d); }
}

/* ===================== UI: –°–õ–û–í–ê ===================== */
function renderCategories(){
  const c=document.getElementById('word-categories'); c.innerHTML='';
  CATEGORIES.forEach(cat=>{
    const tab=document.createElement('div'); tab.className='category-tab'; if (cat==='all') tab.classList.add('active');
    tab.dataset.category = cat; tab.textContent = CATEGORY_NAMES[cat]; tab.onclick = ()=>filterByCategory(cat);
    if (cat!=='all'){ const count=getAvailableWordsInCategory(cat); if (count>0){ const b=document.createElement('span'); b.className='category-count'; b.textContent=count; tab.appendChild(b);} }
    c.appendChild(tab);
  });
}
function getAvailableWordsInCategory(category){
  const all=[...wordsDatabase, ...gameState.discoveredWords];
  return all.filter(w=>w.category===category && !gameState.usedWords.has(w.id)).length;
}
function filterByCategory(category){
  document.querySelectorAll('.category-tab').forEach(t=>t.classList.remove('active'));
  document.querySelector(`[data-category="${category}"]`).classList.add('active');
  renderWords(category);
}
function renderWords(category='all', search=''){
  const container = document.getElementById('words-container');
  const s = (search || document.getElementById('word-search').value || '').toLowerCase();
  let words = [...wordsDatabase, ...gameState.discoveredWords];
  if (category!=='all') words = words.filter(w=>w.category===category);
  if (s) words = words.filter(w=>w.text.toLowerCase().includes(s));
  container.innerHTML = '';
  words.forEach(word=>{
    const el=document.createElement('div'); el.className='word'; el.textContent=word.text; el.dataset.id=word.id;
    if (gameState.discoveredWords.includes(word)) el.classList.add('neologism');
    if (word.tooltip){ const tip=document.createElement('div'); tip.className='word-tooltip'; tip.textContent=word.tooltip; el.appendChild(tip); }
    if (gameState.usedWords.has(word.id)) el.classList.add('used');
    else {
      el.onclick = ()=>selectWord(word);
      el.draggable = true;
      el.addEventListener('dragstart', e=>{ e.dataTransfer.setData('text/plain', word.id); });
    }
    container.appendChild(el);
  });
}
function selectWord(word){
  if (gameState.usedWords.has(word.id)) return;
  document.querySelectorAll('.word').forEach(w=>w.classList.remove('selected'));
  document.querySelector(`.word[data-id="${word.id}"]`)?.classList.add('selected');
  gameState.selectedWord = word; checkCanGiveWord();
}
function checkCanGiveWord(){
  const hasVisitor = !!document.getElementById('visitor-portrait')?.classList.contains('selected');
  const hasWord = !!gameState.selectedWord;
  document.getElementById('give-word-btn').disabled = !(hasVisitor && hasWord);
}

/* ===================== –í–´–î–ê–ß–ê –°–õ–û–í–ê ===================== */
function giveWord(){
  if (!gameState.selectedWord || !gameState.currentVisitor) return;
  const word = gameState.selectedWord;
  const visitor = gameState.currentVisitor;

  createWordEffect(word.text);
  gameState.usedWords.add(word.id);
  gameState.wordsUsedToday.push(word.text);

  const result = (visitor.solutions && (visitor.solutions[word.id] || visitor.solutions.default)) || { health:-3, message:"–°–ª–æ–≤–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç..." };
  applyEffects(result);
  showResult(word.text, result.message, result);
  addToJournal(`–î–µ–Ω—å ${gameState.day}: "${word.text}" ‚Üí ${visitor.name}`);

  if (gameState.mode==='roguelike'){
    const positives = Object.keys(result).filter(k=>k!=='message' && result[k]>0).length;
    gameState.roguelikeScore += positives * 10;
  }

  gameState.selectedWord = null; gameState.currentVisitor = null;
  document.getElementById('give-word-btn').disabled = true;
  renderCategories(); renderWords(); updateWordCount();

  setTimeout(()=>showNextVisitor(), 2000);
}
function createWordEffect(text){
  const d=document.createElement('div'); d.className='word-effect'; d.textContent=text; document.body.appendChild(d); setTimeout(()=>d.remove(), 3000);
}
function applyEffects(result){
  Object.keys(gameState.stats).forEach(stat=>{
    if (result[stat]) gameState.stats[stat] = Math.max(0, Math.min(100, gameState.stats[stat] + result[stat]));
  });
  updateStats();
}
function showResult(word, message, effects){
  const div=document.createElement('div'); div.className='result-message';
  const em = {health:'‚ù§Ô∏è', food:'üåæ', safety:'üõ°Ô∏è', morale:'üíö', trust:'ü§ù'};
  let statsHtml = '<div class="stat-changes">';
  Object.keys(effects).forEach(k=>{
    if (k==='message' || !effects[k]) return;
    const cls = effects[k]>0 ? 'positive' : 'negative';
    statsHtml += `<span class="stat-change ${cls}">${em[k]||''} ${effects[k]>0?'+':''}${effects[k]}</span>`;
  });
  statsHtml += '</div>';
  div.innerHTML = `<h3>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: "${word}"</h3><p>${message||''}</p>${statsHtml}`;
  document.body.appendChild(div);
  setTimeout(()=>div.remove(), 2500);
}

/* ===================== –î–ù–ï–í–ù–ò–ö / –ú–û–î–ê–õ–ö–ò ===================== */
function addToJournal(text){
  gameState.journal.push(text);
  const cont=document.getElementById('journal-content');
  const e=document.createElement('div'); e.className='journal-entry'; e.textContent=text; cont.appendChild(e); cont.scrollTop = cont.scrollHeight;
}
function closeModal(){ document.querySelector('.modal')?.remove(); }

/* ===================== DISCOVERY (–Ω–∞—Ö–æ–¥–∫–∏) ===================== */
let selectedDiscoveries = [];
function showDiscoveryModal(event){
  selectedDiscoveries = [];
  const modal=document.createElement('div'); modal.className='modal';
  modal.innerHTML = `
    <div class="modal-content">
      <h3>${event.title}</h3>
      <p>${event.description}</p>
      <div class="word-selector">
        ${event.words.map(w=>`<div class="word-option" onclick="selectDiscoveredWord(this,'${w}')">${w}</div>`).join('')}
      </div>
      <p>–í—ã–±–µ—Ä–∏—Ç–µ <b>${event.choose}</b> —Å–ª–æ–≤(–∞)</p>
      <div class="action-buttons" style="margin-top:10px">
        <button class="action-button" onclick="confirmDiscovery(${event.choose})">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
        <button class="action-button" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
      </div>
    </div>`;
  document.body.appendChild(modal);
}
function selectDiscoveredWord(el, word){
  const i = selectedDiscoveries.indexOf(word);
  if (i>-1){ selectedDiscoveries.splice(i,1); el.classList.remove('selected'); }
  else {
    el.classList.add('selected');
    selectedDiscoveries.push(word);
  }
}
function confirmDiscovery(maxCount){
  if (selectedDiscoveries.length !== maxCount){ alert(`–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ ${maxCount} —Å–ª–æ–≤(–∞)`); return; }
  selectedDiscoveries.forEach(word=>{
    const newWord = { text:word, category:'abstract', id:'disc_'+Date.now()+'_'+word, tooltip:'–ù–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ' };
    gameState.discoveredWords.push(newWord);
    addToJournal(`–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ: "${word}"`);
  });
  closeModal();
  renderWords(); updateWordCount(); showNextVisitor();
}

/* ===================== –ù–ï–û–õ–û–ì–ò–ó–ú–´ ===================== */
let neoSelected = [];
function openNeologismModal(){
  if (gameState.canCreateNeologism<=0){ showResult('','–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–∏–ª—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤',{ }); return; }
  neoSelected = [];
  const available = [...wordsDatabase, ...gameState.discoveredWords].filter(w=>!gameState.usedWords.has(w.id));
  const modal=document.createElement('div'); modal.className='modal';
  modal.innerHTML = `
    <div class="modal-content">
      <h3>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–ª–æ–≥–∏–∑–º–∞</h3>
      <p>–í—ã–±–µ—Ä–∏—Ç–µ <b>2‚Äì3</b> —Å–ª–æ–≤–∞-–æ—Å–Ω–æ–≤—ã, –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</p>
      <div class="word-selector">
        ${available.map(w=>`<div class="word-option" onclick="toggleNeoWord(this,'${w.id}')">${w.text}</div>`).join('')}
      </div>
      <input type="text" class="word-search" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞..." id="neo-name" style="margin-top:10px;">
      <div class="action-buttons" style="margin-top:10px">
        <button class="action-button" onclick="createNeologism()">–°–æ–∑–¥–∞—Ç—å</button>
        <button class="action-button" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
      </div>
    </div>`;
  document.body.appendChild(modal);
}
function toggleNeoWord(el, id){
  const pool = [...wordsDatabase, ...gameState.discoveredWords];
  const w = pool.find(x=>x.id===id);
  const i = neoSelected.findIndex(x=>x.id===id);
  if (i>-1){ neoSelected.splice(i,1); el.classList.remove('selected'); }
  else { if (neoSelected.length>=3) return; neoSelected.push(w); el.classList.add('selected'); }
}
function createNeologism(){
  const name = document.getElementById('neo-name').value.trim();
  if (!name){ alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞'); return; }
  if (neoSelected.length<2){ alert('–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞-–æ—Å–Ω–æ–≤—ã'); return; }

  // —Å–∂–µ—á—å –∏—Å—Ö–æ–¥–Ω–∏–∫–∏
  neoSelected.forEach(w=> gameState.usedWords.add(w.id));
  // —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
  const tooltip = `–°–æ–∑–¥–∞–Ω–æ –∏–∑: ${neoSelected.map(w=>w.text).join(' + ')}`;
  const newWord = { text:name, category:'abstract', id:'neo_'+Date.now(), tooltip };
  gameState.discoveredWords.push(newWord);
  gameState.canCreateNeologism--;

  closeModal();
  addToJournal(`–°–æ–∑–¥–∞–Ω –Ω–µ–æ–ª–æ–≥–∏–∑–º: "${name}" (${tooltip})`);
  renderCategories(); renderWords(); updateWordCount();
  showResult(name, `–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ ¬´${name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–Ω–∏–≥—É!`, { trust:5 });
}

/* ===================== –ö–û–ù–ï–¶ –î–ù–Ø / –ö–û–ù–¶–û–í–ö–ò ===================== */
function endDay(){
  if (gameState.ended) return;
  eveningSummary();
}

function nextDay(){
  clearPhaseTimer();
  const nextBtn = document.getElementById('next-day-btn');
  if (nextBtn) nextBtn.style.display='none';
  const eveningScreen = document.getElementById('evening-summary-screen');
  if (eveningScreen) eveningScreen.classList.remove('active');
  const eveningText = document.getElementById('evening-summary-text');
  if (eveningText) eveningText.textContent = '';
  const eveningMetrics = document.getElementById('evening-summary-metrics');
  if (eveningMetrics) eveningMetrics.innerHTML = '';
  gameState.day++;
  gameState.pendingEvent = null;
  gameState.currentVisitor = null;
  gameState.visitorsQueue = [];
  if (gameState.mode==='roguelike'){
    Object.keys(gameState.stats).forEach(k=>{
      gameState.stats[k] = Math.max(0, gameState.stats[k] - Math.floor(Math.random()*4));
    });
    updateStats();
  }
  startDay();
}

function gameOver(failedStat){
  if (gameState.ended) return; gameState.ended=true;
  const text = { health:"–≠–ø–∏–¥–µ–º–∏—è —É–Ω–∏—á—Ç–æ–∂–∏–ª–∞ –ø–æ—Å–µ–ª–µ–Ω–∏–µ‚Ä¶", food:"–ì–æ–ª–æ–¥ –ø–æ–≥—É–±–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–∂–∏–≤—à–∏—Ö‚Ä¶", safety:"–•–∞–æ—Å —Ä–∞–∑—Ä—É—à–∏–ª –æ–±—â–∏–Ω—É‚Ä¶", morale:"–õ—é–¥–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ –≤–æ–ª—é –∫ –∂–∏–∑–Ω–∏‚Ä¶", trust:"–ñ–∏—Ç–µ–ª–∏ –∏–∑–≥–Ω–∞–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è‚Ä¶" }[failedStat] || '–ü—Ä–æ–≤–∞–ª‚Ä¶';
  const d=document.createElement('div'); d.className='game-over';
  d.innerHTML = `
    <div class="game-over-content">
      <h1 class="defeat">–ö–û–ù–ï–¶</h1>
      <p style="font-size:1.2em; margin-bottom:16px;">${text}</p>
      <p>–ü—Ä–æ–∂–∏—Ç–æ –¥–Ω–µ–π: ${gameState.day}</p>
      <p>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–ª–æ–≤: ${gameState.usedWords.size}</p>
      ${gameState.mode==='roguelike' ? `<p>–°—á—ë—Ç: ${gameState.roguelikeScore}</p>` : ''}
      <div class="action-buttons" style="margin-top:14px;">
        <button class="action-button" onclick="location.reload()">–ù–ê–ß–ê–¢–¨ –ó–ê–ù–û–í–û</button>
      </div>
    </div>`;
  document.body.appendChild(d);
}
function victory(){
  const remaining = wordsDatabase.length + gameState.discoveredWords.length - gameState.usedWords.size;
  let cls='neutral', msg='–ü–æ—Å–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–ª–æ‚Ä¶';
  if (remaining>30) { cls='victory'; msg='–í—ã —Å–ø–∞—Å–ª–∏ –ª—é–¥–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —è–∑—ã–∫!'; }
  else if (remaining<10){ cls='defeat'; msg='–í—ã–∂–∏–ª–∏, –Ω–æ —è–∑—ã–∫ –ø–æ—á—Ç–∏ —É—Ç—Ä–∞—á–µ–Ω‚Ä¶'; }
  const d=document.createElement('div'); d.className='game-over';
  d.innerHTML = `
    <div class="game-over-content">
      <h1 class="${cls}">${cls==='victory'?'–ü–û–ë–ï–î–ê!':'–ö–û–ù–ï–¶ –ò–°–¢–û–†–ò–ò'}</h1>
      <p style="font-size:1.2em; margin-bottom:16px;">${msg}</p>
      <p>–ü—Ä–æ–π–¥–µ–Ω–æ –¥–Ω–µ–π: ${gameState.day}</p>
      <p>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–ª–æ–≤: ${remaining}</p>
      <div class="action-buttons" style="margin-top:14px;">
        <button class="action-button" onclick="location.reload()">–ù–û–í–ê–Ø –ò–ì–†–ê</button>
      </div>
    </div>`;
  document.body.appendChild(d);
}
