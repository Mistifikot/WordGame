<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Библиотекарь Апокалипсиса</title>
<style>
  /* ========= БАЗА ========= */
  * { margin:0; padding:0; box-sizing:border-box; }
  :root {
    --gold: #ffd700;
    --gold-dim: #ccaa00;
    --ink: #0a0806;
    --paper: #d4c4a0;
    --paper-dark: #b8a584;
    --border: #8b7355;
    --border-light: #a08060;
    --shadow: rgba(0,0,0,0.8);
    --glow-gold: rgba(255,215,0,0.3);
  }
  @font-face { font-family: 'BookTitle'; src: local('Palatino Linotype'), local('Book Antiqua'), local('Georgia'); font-weight: 700; }
  @font-face { font-family: 'BookText';  src: local('Georgia'), local('Palatino'), local('Times New Roman'); }
  body {
    font-family: 'BookText', Georgia, serif;
    background: var(--ink);
    color: var(--paper);
    min-height: 100vh;
    overflow-x: hidden;
    position: relative;
    user-select: none;
  }
  /* ========= АНИМИРОВАННЫЙ ФОН ========= */
  body::before {
    content: '';
    position: fixed; inset: 0; z-index: -2;
    background:
      radial-gradient(circle at 25% 30%, rgba(139,69,19,0.25) 0%, transparent 40%),
      radial-gradient(circle at 75% 70%, rgba(101,67,33,0.2) 0%, transparent 45%),
      radial-gradient(circle at 50% 50%, rgba(50,30,15,0.3) 0%, transparent 60%),
      linear-gradient(180deg, #1a1410 0%, #0a0806 50%, #050403 100%);
  }
  .ash-particle {
    position: fixed; width: 3px; height: 3px; background: rgba(255,215,0,0.3);
    border-radius: 50%; pointer-events: none; opacity: 0; animation: ashFloat 12s infinite;
  }
  @keyframes ashFloat { 0%{transform:translate(0,100vh) rotate(0);opacity:0} 10%{opacity:.8} 90%{opacity:.8} 100%{transform:translate(100px,-100vh) rotate(720deg);opacity:0} }
  .book-glow { position: fixed; width: 500px; height: 500px; background: radial-gradient(circle, rgba(255,200,100,0.08) 0%, transparent 60%); pointer-events:none; animation: bookPulse 4s ease-in-out infinite; z-index:-1; }
  @keyframes bookPulse { 0%,100%{opacity:.6;transform:scale(1)} 50%{opacity:1;transform:scale(1.1)} }

  /* ========= ГЛАВНОЕ МЕНЮ ========= */
  .main-menu { position:fixed; inset:0; z-index:5000; display:flex; flex-direction:column; align-items:center; justify-content:center; background:linear-gradient(135deg,#0a0806 0%,#1a1410 100%); transition:opacity 1s ease; }
  .main-menu h1 {
    font-family:'BookTitle', Georgia, serif; font-size:4.5em; color:var(--gold);
    text-shadow:3px 3px 6px var(--shadow), 0 0 40px var(--glow-gold), 0 0 80px rgba(255,215,0,0.2);
    margin-bottom:20px; animation:titleFloat 3s ease-in-out infinite; letter-spacing:2px;
  }
  @keyframes titleFloat { 0%,100%{transform:translateY(0) scale(1)} 50%{transform:translateY(-10px) scale(1.02)} }
  .menu-subtitle { font-style:italic; color:var(--paper-dark); margin-bottom:50px; font-size:1.2em; opacity:.9; }
  .menu-buttons{ display:flex; flex-direction:column; gap:20px; }
  .menu-button{
    padding:18px 50px; min-width:320px; text-align:center; cursor:pointer;
    background:linear-gradient(135deg,#8b7355 0%,#6b5945 50%,#8b7355 100%); background-size:200% 100%;
    border:2px solid var(--gold); border-radius:10px; color:var(--gold); font-size:1.2em; font-family:'BookTitle', Georgia, serif; font-weight:700; letter-spacing:1px;
    transition:all .4s ease; text-shadow:2px 2px 4px rgba(0,0,0,0.5); position:relative; overflow:hidden;
  }
  .menu-button::before{ content:''; position:absolute; top:0; left:-100%; width:100%; height:100%; background:linear-gradient(90deg,transparent,rgba(255,215,0,0.2),transparent); transition:left .6s ease; }
  .menu-button:hover{ background-position:-100% 0; transform:translateY(-3px); box-shadow:0 10px 30px rgba(255,215,0,0.3), inset 0 0 20px rgba(255,215,0,0.1); }
  .menu-button:hover::before{ left:100% }

  /* ========= ИГРОВОЙ КОНТЕЙНЕР ========= */
  .game-container{ max-width:1700px; margin:0 auto; padding:25px; min-height:100vh; opacity:0; transition:opacity 1s ease; display:grid; gap:25px; grid-template-columns:320px 1fr 400px; }
  .game-container.visible{ opacity:1; }

  /* ========= ПАНЕЛЬ СТАТИСТИКИ ========= */
  .stats-panel{ display:flex; flex-direction:column; gap:20px; }
  .stats-box{
    background:linear-gradient(145deg,rgba(0,0,0,0.85),rgba(30,20,10,0.75)); border:2px solid var(--border); border-radius:15px; padding:25px;
    box-shadow: inset 0 2px 10px rgba(255,215,0,0.05), inset 0 -2px 10px rgba(0,0,0,0.5), 0 5px 25px rgba(0,0,0,0.8);
    position:relative; overflow:hidden;
  }
  .stats-box::before{ content:''; position:absolute; top:-50%; left:-50%; width:200%; height:200%; background:radial-gradient(circle,rgba(255,215,0,0.03) 0%, transparent 70%); animation:rotateGlow 20s linear infinite; }
  @keyframes rotateGlow{ from{transform:rotate(0)} to{transform:rotate(360deg)} }
  .stats-box h2{ font-family:'BookTitle', Georgia, serif; font-weight:700; color:var(--gold); margin-bottom:25px; text-align:center; font-size:1.3em; text-shadow:2px 2px 4px var(--shadow), 0 0 15px var(--glow-gold); letter-spacing:1px; position:relative; }
  .stat{ margin-bottom:20px; position:relative; }
  .stat-label{ display:flex; justify-content:space-between; margin-bottom:10px; font-size:.95em; font-weight:600; }
  .stat-value{ font-weight:700; color:var(--gold); text-shadow:0 0 5px var(--glow-gold); font-size:1.1em; }
  .stat-bar{ background:linear-gradient(to bottom,#0a0806,#1a1410); height:26px; border-radius:13px; overflow:hidden; border:1px solid #3a3025; box-shadow: inset 0 2px 6px rgba(0,0,0,0.7), 0 1px 2px rgba(255,215,0,0.1); position:relative; }
  .stat-fill{ height:100%; transition:width .8s cubic-bezier(.4,0,.2,1); border-radius:13px; position:relative; overflow:hidden; }
  .stat-fill::after{ content:''; position:absolute; inset:0; background:linear-gradient(90deg,transparent 0%, rgba(255,255,255,0.3) 50%, transparent 100%); animation:shimmer 2.5s infinite; }
  @keyframes shimmer{ 0%{transform:translateX(-100%) skewX(-15deg)} 100%{transform:translateX(200%) skewX(-15deg)} }
  .stat.warning .stat-bar{ animation: warningPulse 1s infinite; box-shadow: inset 0 2px 6px rgba(0,0,0,0.7), 0 0 15px rgba(255,0,0,0.4); }
  .stat.critical .stat-value{ color:#ff4444; animation: criticalBlink .5s infinite; }
  @keyframes criticalBlink{ 0%,100%{opacity:1} 50%{opacity:.5} }
  @keyframes warningPulse{ 0%,100%{border-color:#8b4513} 50%{border-color:#ff6b6b} }
  .stat-health .stat-fill{ background:linear-gradient(90deg,#4a0e0e,#8b0000,#dc143c,#ff6b6b) }
  .stat-food   .stat-fill{ background:linear-gradient(90deg,#4a3a0a,#8b6914,#daa520,#ffdb58) }
  .stat-safety .stat-fill{ background:linear-gradient(90deg,#2a0a4a,#4b0082,#8a2be2,#b19cd9) }
  .stat-morale .stat-fill{ background:linear-gradient(90deg,#0a3a0a,#006400,#32cd32,#90ee90) }
  .stat-trust  .stat-fill{ background:linear-gradient(90deg,#0a0a3a,#191970,#4169e1,#6495ed) }

  .journal-box{ background:linear-gradient(145deg,rgba(0,0,0,0.85),rgba(30,20,10,0.75)); border:2px solid var(--border); border-radius:15px; padding:20px; max-height:350px; overflow-y:auto; box-shadow: inset 0 2px 10px rgba(0,0,0,0.5), 0 5px 25px rgba(0,0,0,0.8); }
  .journal-box h3{ font-family:'BookTitle', Georgia, serif; font-weight:700; color:var(--gold); margin-bottom:15px; font-size:1.1em; text-shadow:0 0 10px var(--glow-gold); }
  .journal-entry{ font-size:.9em; margin-bottom:12px; padding-bottom:12px; border-bottom:1px solid rgba(139,115,85,0.3); font-style:italic; color:var(--paper-dark); animation: fadeIn .5s ease; line-height:1.4; }
  @keyframes fadeIn{ from{opacity:0; transform:translateY(30px)} to{opacity:1; transform:translateY(0)} }

  /* ========= ЦЕНТРАЛЬНАЯ ОБЛАСТЬ ========= */
  .main-area{ display:flex; flex-direction:column; gap:25px; }
  .day-info{ background:linear-gradient(145deg,rgba(0,0,0,0.85),rgba(40,30,15,0.75)); border:2px solid var(--border); border-radius:20px; padding:30px; text-align:center; position:relative; overflow:hidden; box-shadow: inset 0 2px 15px rgba(255,215,0,0.1), 0 5px 30px rgba(0,0,0,0.8); }
  .day-info::before{ content:''; position:absolute; top:-100%; left:-100%; width:300%; height:300%; background:radial-gradient(circle,rgba(255,215,0,0.05) 0%, transparent 60%); animation:rotate 30s linear infinite; }
  @keyframes rotate{ from{transform:rotate(0)} to{transform:rotate(360deg)} }
  .day-info h1{ font-family:'BookTitle', Georgia, serif; font-weight:700; font-size:2.8em; color:var(--gold); text-shadow:3px 3px 6px var(--shadow), 0 0 20px var(--glow-gold); margin-bottom:15px; position:relative; letter-spacing:2px; }
  .day-description{ font-size:1.2em; color:var(--paper); font-style:italic; position:relative; opacity:.9; }

  .visitor-area{
    background:linear-gradient(145deg,rgba(0,0,0,0.85),rgba(30,20,10,0.75)); border:2px solid var(--border); border-radius:20px; padding:40px; min-height:450px;
    display:flex; flex-direction:column; align-items:center; justify-content:center; position:relative; box-shadow: inset 0 0 60px rgba(0,0,0,0.5), 0 5px 35px rgba(0,0,0,0.8);
  }
  .visitors-queue{ position:absolute; top:15px; right:15px; display:flex; gap:8px; }
  .queue-indicator{ width:12px; height:12px; border-radius:50%; background:var(--border); transition:all .3s ease; }
  .queue-indicator.active{ background:var(--gold); box-shadow:0 0 10px var(--glow-gold); animation:queuePulse 1s infinite; }
  @keyframes queuePulse{ 0%,100%{transform:scale(1)} 50%{transform:scale(1.2)} }
  .visitor{ text-align:center; animation: fadeIn .8s ease; max-width:500px; }
  .visitor-portrait{
    width:160px; height:160px; border-radius:50%; margin:0 auto 25px; display:flex; align-items:center; justify-content:center; border:3px solid var(--border);
    background: radial-gradient(circle, #2a1810, #1a0f08); font-size:4.5em; cursor:pointer; transition:all .3s ease; box-shadow:0 5px 20px rgba(0,0,0,0.6), inset 0 0 30px rgba(0,0,0,0.4); position:relative;
  }
  .visitor-portrait::after{ content:''; position:absolute; inset:-8px; border-radius:50%; background:radial-gradient(circle,transparent 60%, rgba(255,215,0,0.1) 100%); opacity:0; transition:opacity .3s ease; }
  .visitor-portrait:hover{ transform:scale(1.08); box-shadow:0 8px 30px rgba(139,115,85,0.5), inset 0 0 40px rgba(255,215,0,0.1); }
  .visitor-portrait:hover::after{ opacity:1; }
  .visitor-portrait.selected{ border-color:var(--gold); box-shadow:0 0 40px var(--glow-gold), inset 0 0 30px rgba(255,215,0,0.2); animation:selectedGlow 2s ease-in-out infinite; }
  @keyframes selectedGlow{ 0%,100%{ transform:scale(1); filter:brightness(1)} 50%{ transform:scale(1.05); filter:brightness(1.2)} }
  .visitor-name{ font-family:'BookTitle', Georgia, serif; font-weight:700; font-size:1.5em; color:#e8d7c3; margin-bottom:20px; text-shadow:2px 2px 4px var(--shadow); letter-spacing:1px; }
  .visitor-problem{
    background: linear-gradient(135deg, rgba(139,115,85,0.15), rgba(100,80,60,0.1));
    border:1px solid rgba(139,115,85,0.5); border-radius:12px; padding:20px; margin:15px 0; font-style:italic; line-height:1.6; font-size:1.1em;
    box-shadow: inset 0 2px 5px rgba(0,0,0,0.3), 0 2px 10px rgba(0,0,0,0.2);
  }
  .problem-keyword{ color:var(--gold); font-weight:700; font-style:normal; text-transform:uppercase; letter-spacing:1px; text-shadow:0 0 12px var(--glow-gold); animation:keywordPulse 2s ease-in-out infinite; }
  @keyframes keywordPulse{ 0%,100%{ filter:brightness(1)} 50%{ filter:brightness(1.3)} }

  /* ========= КНИГА СЛОВ ========= */
  .word-book{
    background:linear-gradient(145deg,rgba(0,0,0,0.85),rgba(40,30,15,0.75)); border:2px solid var(--border); border-radius:20px; padding:25px; display:flex; flex-direction:column;
    max-height:calc(100vh - 50px); box-shadow: inset 0 2px 15px rgba(255,215,0,0.05), 0 5px 35px rgba(0,0,0,0.8); position:relative; overflow:hidden;
  }
  .word-book::before{ content:''; position:absolute; top:-50%; right:-50%; width:200%; height:200%; background:radial-gradient(circle,rgba(255,215,0,0.02) 0%, transparent 60%); animation: rotate 40s linear infinite reverse; }
  .word-book h2{ font-family:'BookTitle', Georgia, serif; font-weight:700; color:var(--gold); margin-bottom:15px; text-align:center; font-size:1.6em; text-shadow:2px 2px 4px var(--shadow), 0 0 20px var(--glow-gold); letter-spacing:2px; position:relative; }
  .word-count{ text-align:center; color:var(--paper-dark); font-size:.95em; margin-bottom:15px; font-weight:600; position:relative; }
  .word-search{
    margin-bottom:20px; padding:12px 16px; background: rgba(0,0,0,0.5); border:1px solid var(--border); border-radius:8px; color:var(--paper); font-family:'BookText', Georgia, serif; font-size:1em; transition:all .3s ease; position:relative;
  }
  .word-search:focus{ outline:none; border-color:var(--gold-dim); box-shadow:0 0 10px rgba(255,215,0,0.2); }
  .word-categories{ display:flex; gap:8px; margin-bottom:20px; flex-wrap:wrap; position:relative; }
  .category-tab{
    padding:8px 14px; background:linear-gradient(135deg, rgba(139,115,85,0.2), rgba(100,80,60,0.15)); border:1px solid var(--border); border-radius:8px; cursor:pointer; font-size:.9em; font-weight:600; transition:all .3s ease; position:relative; letter-spacing:.5px;
  }
  .category-tab.active{ background:linear-gradient(135deg, rgba(139,115,85,0.5), rgba(100,80,60,0.4)); color:var(--gold); box-shadow:0 0 15px rgba(255,215,0,0.3), inset 0 1px 3px rgba(255,215,0,0.1); }
  .category-tab:hover:not(.active){ background:linear-gradient(135deg, rgba(139,115,85,0.35), rgba(100,80,60,0.25)); transform:translateY(-2px); }
  .category-count{ position:absolute; top:-6px; right:-6px; background:var(--gold); color:var(--ink); border-radius:50%; width:18px; height:18px; font-size:.75em; font-weight:700; display:flex; align-items:center; justify-content:center; box-shadow:0 2px 5px rgba(0,0,0,0.3); }

  .words-container{ flex:1; overflow-y:auto; padding:20px; background:linear-gradient(135deg, rgba(0,0,0,0.3), rgba(20,15,10,0.2)); border-radius:12px; margin-bottom:20px; position:relative; }
  .words-container::-webkit-scrollbar{ width:10px; } .words-container::-webkit-scrollbar-track{ background:rgba(0,0,0,0.3); border-radius:5px; }
  .words-container::-webkit-scrollbar-thumb{ background:var(--border); border-radius:5px; } .words-container::-webkit-scrollbar-thumb:hover{ background:var(--border-light); }

  .word{
    display:inline-block; padding:12px 18px; margin:8px; background:linear-gradient(135deg, rgba(139,115,85,0.35), rgba(100,80,60,0.3));
    border:1px solid var(--border); border-radius:8px; cursor:grab; transition:all .25s ease; position:relative; font-size:1.05em; font-weight:600; letter-spacing:.5px;
    box-shadow:0 2px 8px rgba(0,0,0,0.3), inset 0 1px 2px rgba(255,215,0,0.05);
  }
  .word:active{ cursor:grabbing; }
  .word:hover:not(.used){ background:linear-gradient(135deg, rgba(139,115,85,0.5), rgba(100,80,60,0.45)); transform:translateY(-4px) scale(1.05); box-shadow:0 6px 20px rgba(0,0,0,0.5), 0 0 15px rgba(255,215,0,0.2), inset 0 1px 3px rgba(255,215,0,0.1); }
  .word.used{ opacity:.3; text-decoration:line-through; cursor:not-allowed; background:rgba(50,50,50,0.3); box-shadow:none; }
  .word.selected{ background:linear-gradient(135deg, rgba(255,215,0,0.35), rgba(255,200,0,0.25)); border-color:var(--gold); box-shadow:0 0 20px var(--glow-gold), inset 0 0 10px rgba(255,215,0,0.2); transform:translateY(-4px) scale(1.08); animation:selectedWordPulse 1s ease-in-out infinite; }
  @keyframes selectedWordPulse{ 0%,100%{ filter:brightness(1)} 50%{ filter:brightness(1.2)} }
  .word.neologism{ background:linear-gradient(135deg, rgba(150,100,200,0.35), rgba(100,50,150,0.3)); border-color:#9966ff; }
  .word-tooltip{
    position:absolute; bottom:calc(100% + 8px); left:50%; transform:translateX(-50%);
    background:rgba(0,0,0,0.95); border:1px solid var(--border); padding:10px 14px; border-radius:8px; font-size:.9em; white-space:nowrap; pointer-events:none; opacity:0; transition:opacity .3s ease; z-index:1000; box-shadow:0 4px 12px rgba(0,0,0,0.5);
  }
  .word:hover .word-tooltip{ opacity:1 }

  /* Кнопки действий */
  .action-buttons{ display:flex; gap:12px; position:relative; }
  .action-button{
    flex:1; padding:14px 24px; background:linear-gradient(135deg,#8b7355 0%, #6b5945 50%, #8b7355 100%); background-size:200% 100%;
    border:2px solid var(--gold); border-radius:10px; color:var(--gold); font-family:'BookTitle', Georgia, serif; font-weight:700; font-size:1.05em; cursor:pointer; transition:all .3s ease; text-shadow:2px 2px 4px rgba(0,0,0,0.5); position:relative; letter-spacing:.5px; overflow:hidden;
  }
  .action-button::before{ content:''; position:absolute; top:0; left:-100%; width:100%; height:100%; background:linear-gradient(90deg,transparent, rgba(255,215,0,0.3), transparent); transition:left .6s ease; }
  .action-button:hover:not(:disabled){ background-position:-100% 0; box-shadow:0 0 25px var(--glow-gold), inset 0 0 15px rgba(255,215,0,0.1); transform:translateY(-2px); }
  .action-button:hover:not(:disabled)::before{ left:100% }
  .action-button:disabled{ opacity:.4; cursor:not-allowed; border-color:#666; color:#999; background:linear-gradient(135deg,#4a4a4a,#3a3a3a) }
  .neologism-count{
    position:absolute; top:-10px; right:-10px; background:var(--gold); color:var(--ink); border-radius:50%; width:22px; height:22px; font-size:.85em; font-weight:700; display:flex; align-items:center; justify-content:center; box-shadow:0 2px 8px rgba(0,0,0,0.4);
  }

  /* ========= МОДАЛЬНЫЕ ОКНА ========= */
  .modal{ position:fixed; inset:0; background:rgba(0,0,0,0.92); display:flex; align-items:center; justify-content:center; z-index:4000; animation: fadeIn .3s ease; backdrop-filter: blur(5px); }
  .modal-content{
    background:linear-gradient(145deg,#1a1410,#2a2010); border:2px solid var(--gold); border-radius:20px; padding:35px; max-width:750px; max-height:85vh; overflow-y:auto; text-align:center;
    box-shadow:0 10px 50px rgba(0,0,0,0.8), 0 0 40px var(--glow-gold); animation: modalSlide .4s ease;
  }
  @keyframes modalSlide{ from{opacity:0; transform:translateY(-30px)} to{opacity:1; transform:translateY(0)} }
  .modal-content h3{ font-family:'BookTitle', Georgia, serif; font-weight:700; color:var(--gold); margin-bottom:20px; font-size:1.5em; text-shadow:0 0 15px var(--glow-gold); letter-spacing:1px; }

  /* Выбор слов в модалках (discovery / neologism) */
  .word-selector{ display:grid; grid-template-columns: repeat(auto-fill, minmax(120px,1fr)); gap:10px; margin:15px 0 10px; max-height:260px; overflow:auto; padding:10px; background:rgba(0,0,0,0.25); border-radius:10px; }
  .word-option{
    padding:10px 12px; border:1px solid var(--border); border-radius:8px; cursor:pointer;
    background:linear-gradient(135deg, rgba(139,115,85,0.25), rgba(100,80,60,0.2)); transition: all .25s ease; font-weight:600;
  }
  .word-option:hover{ transform: translateY(-2px); background:linear-gradient(135deg, rgba(139,115,85,0.4), rgba(100,80,60,0.35)); }
  .word-option.selected{ border-color: var(--gold); box-shadow: 0 0 14px var(--glow-gold); background:linear-gradient(135deg, rgba(255,215,0,0.25), rgba(255,200,0,0.2)); }

  /* ========= РЕЗУЛЬТАТЫ ========= */
  .result-message{
    position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); z-index:3500;
    background:linear-gradient(145deg, rgba(0,0,0,0.96), rgba(40,30,15,0.96)); border:2px solid var(--gold); border-radius:20px; padding:30px; max-width:650px; text-align:center;
    animation: resultAppear .5s ease; box-shadow:0 10px 50px rgba(0,0,0,0.8), 0 0 30px var(--glow-gold);
  }
  @keyframes resultAppear{ from{opacity:0; transform:translate(-50%, -50%) scale(.85)} to{opacity:1; transform:translate(-50%, -50%) scale(1)} }
  .stat-changes{ margin-top:20px; display:flex; justify-content:center; gap:20px; flex-wrap:wrap; }
  .stat-change{ font-size:1.1em; font-weight:700; padding:5px 10px; border-radius:5px; animation: statPop .5s ease; }
  @keyframes statPop{ from{ transform:scale(0) } to{ transform:scale(1) } }
  .positive{ color:#4ade80; text-shadow:0 0 10px rgba(74,222,128,0.5); background:rgba(74,222,128,0.1); }
  .negative{ color:#ff6b6b; text-shadow:0 0 10px rgba(255,107,107,0.5); background:rgba(255,107,107,0.1); }

  .word-effect{
    position:fixed; font-family:'BookTitle', Georgia, serif; font-weight:700; font-size:3em; color:var(--gold); pointer-events:none; z-index:3400;
    text-shadow:0 0 20px var(--glow-gold), 0 0 40px rgba(255,215,0,0.5); animation: wordDisappear 3s ease forwards; left:50%; top:50%; letter-spacing:2px;
  }
  @keyframes wordDisappear{ 0%{opacity:1; transform:translate(-50%,-50%) scale(1) rotate(0); filter:blur(0)} 50%{opacity:1; transform:translate(-50%,-80%) scale(1.2) rotate(5deg); filter:blur(0)} 100%{opacity:0; transform:translate(-50%,-200%) scale(.3) rotate(15deg); filter:blur(10px)} }

  /* ========= КОНЕЦ ИГРЫ ========= */
  .game-over{ position:fixed; inset:0; background:rgba(0,0,0,0.98); display:flex; align-items:center; justify-content:center; z-index:3000; animation: fadeIn 1s ease; backdrop-filter: blur(10px); }
  .game-over-content{ text-align:center; max-width:750px; padding:50px; }
  .game-over h1{ font-family:'BookTitle', Georgia, serif; font-weight:700; font-size:4em; margin-bottom:30px; text-shadow:0 0 40px currentColor; letter-spacing:3px; }
  .victory{ color:#4ade80 } .defeat{ color:#ff6b6b } .neutral{ color:var(--gold) }

  /* Спец-уведомления */
  .event-notification{
    position:fixed; top:50px; left:50%; transform:translateX(-50%);
    background:linear-gradient(145deg, rgba(40,30,15,0.98), rgba(0,0,0,0.98)); border:2px solid var(--gold); border-radius:15px; padding:20px 30px; color:var(--paper);
    font-size:1.1em; font-weight:600; z-index:3600; animation:eventSlide .5s ease; box-shadow:0 10px 40px rgba(0,0,0,0.8), 0 0 30px var(--glow-gold);
  }
  @keyframes eventSlide{ from{ opacity:0; transform:translateX(-50%) translateY(-20px)} to{ opacity:1; transform:translateX(-50%) translateY(0)} }

  /* Адаптивность */
  @media (max-width: 1400px){
    .game-container{ grid-template-columns:1fr; max-width:900px; }
    .stats-panel{ display:grid; grid-template-columns:1fr 1fr; gap:20px; }
    .word-book{ max-height:500px; }
  }
</style>
</head>
<body>

<!-- Главное меню -->
<div class="main-menu" id="main-menu">
  <h1>БИБЛИОТЕКАРЬ АПОКАЛИПСИСА</h1>
  <p class="menu-subtitle">Каждое слово на вес золота...</p>
  <div class="menu-buttons">
    <button class="menu-button" id="continue-btn" style="display:none" onclick="continueGame()">ПРОДОЛЖИТЬ</button>
    <button class="menu-button" onclick="startCampaign()">НОВАЯ КАМПАНИЯ</button>
    <button class="menu-button" onclick="startRoguelike()">ВЫЖИВАНИЕ</button>
  </div>
</div>

<!-- Эффекты свечения -->
<div class="book-glow" style="top: 10%; left: 5%;"></div>
<div class="book-glow" style="top: 60%; right: 10%;"></div>

<!-- Основной контейнер -->
<div class="game-container" id="game-container">
  <!-- Левая панель -->
  <div class="stats-panel">
    <div class="stats-box">
      <h2>⚜️ ПОСЕЛЕНИЕ ⚜️</h2>
      <div class="stat stat-health" data-stat="health">
        <div class="stat-label"><span>❤️ Здоровье</span><span class="stat-value" id="health-value">65</span></div>
        <div class="stat-bar"><div class="stat-fill" style="width:65%"></div></div>
      </div>
      <div class="stat stat-food" data-stat="food">
        <div class="stat-label"><span>🌾 Провиант</span><span class="stat-value" id="food-value">55</span></div>
        <div class="stat-bar"><div class="stat-fill" style="width:55%"></div></div>
      </div>
      <div class="stat stat-safety" data-stat="safety">
        <div class="stat-label"><span>🛡️ Безопасность</span><span class="stat-value" id="safety-value">45</span></div>
        <div class="stat-bar"><div class="stat-fill" style="width:45%"></div></div>
      </div>
      <div class="stat stat-morale" data-stat="morale">
        <div class="stat-label"><span>💚 Мораль</span><span class="stat-value" id="morale-value">50</span></div>
        <div class="stat-bar"><div class="stat-fill" style="width:50%"></div></div>
      </div>
      <div class="stat stat-trust" data-stat="trust">
        <div class="stat-label"><span>🤝 Доверие</span><span class="stat-value" id="trust-value">45</span></div>
        <div class="stat-bar"><div class="stat-fill" style="width:45%"></div></div>
      </div>
    </div>
    <div class="journal-box">
      <h3>📜 ДНЕВНИК</h3>
      <div id="journal-content">
        <div class="journal-entry">Библиотека открыта для страждущих...</div>
      </div>
    </div>
  </div>

  <!-- Центральная область -->
  <div class="main-area">
    <div class="day-info">
      <h1>ДЕНЬ <span id="day-number">1</span></h1>
      <p class="day-description" id="day-description">Начало испытаний...</p>
    </div>

    <div class="visitor-area">
      <div class="visitors-queue" id="visitors-queue"></div>
      <div id="visitor-content"></div>
    </div>

    <button class="action-button" id="next-day-btn" style="display:none" onclick="nextDay()">ЗАВЕРШИТЬ ДЕНЬ</button>
  </div>

  <!-- Правая панель -->
  <div class="word-book">
    <h2>📖 КНИГА СЛОВ</h2>
    <div class="word-count" id="word-count">Доступно: 0</div>
    <input type="text" class="word-search" placeholder="Поиск слова..." id="word-search">
    <div class="word-categories" id="word-categories"></div>
    <div class="words-container" id="words-container"></div>
    <div class="action-buttons">
      <button class="action-button" id="give-word-btn" onclick="giveWord()" disabled>ОТДАТЬ СЛОВО</button>
      <button class="action-button" id="create-word-btn" onclick="openNeologismModal()">СОЗДАТЬ <span class="neologism-count" id="neo-count">2</span></button>
    </div>
  </div>
</div>

<script>
/* ===================== КОНФИГ / СОСТОЯНИЕ ===================== */
const CATEGORIES = ['all','medicine','emotion','nature','resource','social','abstract'];
const CATEGORY_NAMES = { all:'ВСЕ', medicine:'МЕДИЦИНА', emotion:'ЭМОЦИИ', nature:'ПРИРОДА', resource:'РЕСУРСЫ', social:'ОБЩЕСТВО', abstract:'АБСТРАКТ' };

const DEFAULT_STATS = { health:65, food:55, safety:45, morale:50, trust:45 };

let gameState = {
  mode:'campaign',
  day:1,
  stats:{...DEFAULT_STATS},
  currentVisitor:null,
  selectedWord:null,
  visitorsQueue:[],
  usedWords:new Set(),
  journal:[],
  canCreateNeologism:2,
  discoveredWords:[],
  roguelikeScore:0,
  ended:false,
  nightDecay:3,
  crisisFlags:{ epidemic:false, famine:false, unrest:false },
  wordsUsedToday:[],
  snapshot:{}
};

/* ===================== БАЗА СЛОВ ===================== */
const wordsDatabase = [
  { text:"Лекарство", category:"medicine", id:"med1", tooltip:"Универсальное средство" },
  { text:"Исцеление", category:"medicine", id:"med2", tooltip:"Магическое восстановление" },
  { text:"Травы", category:"medicine", id:"med3", tooltip:"Природные средства" },
  { text:"Перевязка", category:"medicine", id:"med4", tooltip:"Остановка крови" },
  { text:"Антидот", category:"medicine", id:"med5", tooltip:"Противоядие" },
  { text:"Карантин", category:"medicine", id:"med6", tooltip:"Изоляция больных" },

  { text:"Мужество", category:"emotion", id:"emo1", tooltip:"Храбрость" },
  { text:"Надежда", category:"emotion", id:"emo2", tooltip:"Вера в лучшее" },
  { text:"Покой", category:"emotion", id:"emo3", tooltip:"Умиротворение" },
  { text:"Гнев", category:"emotion", id:"emo4", tooltip:"Ярость" },
  { text:"Радость", category:"emotion", id:"emo5", tooltip:"Счастье" },
  { text:"Любовь", category:"emotion", id:"emo6", tooltip:"Привязанность" },
  { text:"Страх", category:"emotion", id:"emo7", tooltip:"Ужас" },
  { text:"Отчаяние", category:"emotion", id:"emo8", tooltip:"Безнадежность" },

  { text:"Дождь", category:"nature", id:"nat1", tooltip:"Вода с небес" },
  { text:"Огонь", category:"nature", id:"nat2", tooltip:"Пламя" },
  { text:"Вода", category:"nature", id:"nat3", tooltip:"Источник жизни" },
  { text:"Ветер", category:"nature", id:"nat4", tooltip:"Движение воздуха" },
  { text:"Солнце", category:"nature", id:"nat5", tooltip:"Свет и тепло" },
  { text:"Земля", category:"nature", id:"nat6", tooltip:"Почва" },
  { text:"Лёд", category:"nature", id:"nat7", tooltip:"Холод" },
  { text:"Туман", category:"nature", id:"nat8", tooltip:"Сокрытие" },

  { text:"Хлеб", category:"resource", id:"res1", tooltip:"Основная пища" },
  { text:"Зерно", category:"resource", id:"res2", tooltip:"Семена" },
  { text:"Урожай", category:"resource", id:"res3", tooltip:"Плоды труда" },
  { text:"Инструмент", category:"resource", id:"res4", tooltip:"Орудия" },
  { text:"Убежище", category:"resource", id:"res5", tooltip:"Защита" },
  { text:"Оружие", category:"resource", id:"res6", tooltip:"Средство обороны" },

  { text:"Мир", category:"social", id:"soc1", tooltip:"Согласие" },
  { text:"Справедливость", category:"social", id:"soc2", tooltip:"Честность" },
  { text:"Закон", category:"social", id:"soc3", tooltip:"Порядок" },
  { text:"Единство", category:"social", id:"soc4", tooltip:"Сплоченность" },
  { text:"Знание", category:"social", id:"soc5", tooltip:"Мудрость" },
  { text:"Правда", category:"social", id:"soc6", tooltip:"Истина" },

  { text:"Время", category:"abstract", id:"abs1", tooltip:"Течение событий" },
  { text:"Тишина", category:"abstract", id:"abs2", tooltip:"Отсутствие звука" },
  { text:"Свет", category:"abstract", id:"abs3", tooltip:"Сияние" },
  { text:"Судьба", category:"abstract", id:"abs4", tooltip:"Предначертание" },
  { text:"Память", category:"abstract", id:"abs5", tooltip:"Воспоминания" }
];

/* ===================== КАМПАНИЯ / СОБЫТИЯ ===================== */
const campaignEvents = {
  1:{ visitors:[
    { name:"Знахарка Марфа", portrait:"👵", problem:"Болезнь", description:"В деревне началась <span class='problem-keyword'>Болезнь</span>. Люди слабеют.", solutions:{
      "med1":{health:12,trust:5,message:"Лекарство помогает больным."},
      "med2":{health:18,trust:8,message:"Исцеление спасает многих!"},
      "med3":{health:6,message:"Травы облегчают симптомы."},
      "med6":{health:10,safety:5,message:"Карантин сдерживает заразу."},
      "nat2":{health:-8,safety:-5,message:"Огонь?! Паника!"},
      "default":{health:-5,trust:-3,message:"Болезнь распространяется..."}
    }},
    { name:"Голодный ребёнок", portrait:"👦", problem:"Голод", description:"Пожалуйста, есть нечего. <span class='problem-keyword'>Голод</span> мучает.", solutions:{
      "res1":{food:8,morale:5,message:"Хлеб утоляет голод."},
      "res2":{food:5,message:"Зерно даст кашу."},
      "nat3":{food:2,health:2,message:"Вода помогает немного."},
      "default":{food:-4,morale:-3,message:"Голод усиливается..."}
    }}
  ]},
  2:{ visitors:[
    { name:"Фермер Иван", portrait:"👨‍🌾", problem:"Засуха", description:"Поля гибнут! <span class='problem-keyword'>Засуха</span> уничтожает урожай!", solutions:{
      "nat1":{food:15,morale:8,trust:8,message:"Дождь спасает поля!"},
      "nat3":{food:8,trust:4,message:"Вода помогает частично."},
      "res3":{food:12,message:"Урожай чудесно созревает."},
      "nat2":{food:-12,safety:-8,message:"Огонь сжигает остатки!"},
      "default":{food:-6,morale:-4,message:"Засуха продолжается..."}
    }},
    { name:"Испуганная мать", portrait:"👩", problem:"Страх", description:"Дети боятся темноты. <span class='problem-keyword'>Страх</span> не даёт спать.", solutions:{
      "emo1":{morale:10,trust:6,message:"Мужество вселяет силу."},
      "emo3":{morale:8,health:3,message:"Покой успокаивает."},
      "abs3":{morale:6,safety:2,message:"Свет прогоняет тьму."},
      "emo7":{morale:-10,health:-5,message:"Страх усиливает страх!"},
      "default":{morale:-4,message:"Страх остаётся..."}
    }},
    { name:"Стражник", portrait:"💂", problem:"Угроза", description:"Бандиты рядом! <span class='problem-keyword'>Угроза</span> нападения!", solutions:{
      "res6":{safety:15,trust:8,message:"Оружие отпугивает врагов."},
      "soc4":{safety:10,morale:8,message:"Единство укрепляет защиту."},
      "nat8":{safety:8,message:"Туман скрывает поселение."},
      "emo7":{safety:-12,morale:-10,message:"Страх вызывает панику!"},
      "default":{safety:-8,morale:-4,message:"Угроза растёт..."}
    }}
  ],
  event:{ type:"discovery", title:"Найден свиток", description:"В руинах найдены слова:", words:["Щит","Молот","Ключ"], choose:1 } },
  3:{ visitors:[
    { name:"Старейшина", portrait:"👴", problem:"Раздор", description:"Люди ссорятся из-за воды. <span class='problem-keyword'>Раздор</span> разрывает общину.", solutions:{
      "soc1":{safety:18,morale:12,trust:12,message:"Мир восстановлен!"},
      "soc2":{safety:14,trust:10,message:"Справедливость торжествует."},
      "soc3":{safety:12,trust:8,message:"Закон наводит порядок."},
      "nat2":{safety:-15,health:-10,message:"Огонь! Хаос!"},
      "default":{safety:-8,morale:-6,message:"Раздор усиливается..."}
    }},
    { name:"Больная женщина", portrait:"🤒", problem:"Лихорадка", description:"Жар не спадает. <span class='problem-keyword'>Лихорадка</span> убивает.", solutions:{
      "med1":{health:10,trust:6,message:"Лекарство снижает жар."},
      "med2":{health:15,trust:10,message:"Исцеление спасает жизнь!"},
      "nat7":{health:4,message:"Лёд облегчает жар."},
      "default":{health:-8,trust:-4,message:"Лихорадка усиливается..."}
    }},
    { name:"Торговец", portrait:"🧔", problem:"Обман", description:"Меня обвиняют в <span class='problem-keyword'>Обмане</span>. Это ложь!", solutions:{
      "soc6":{trust:12,morale:8,message:"Правда раскрыта!"},
      "soc2":{trust:10,safety:5,message:"Справедливость восторжествовала."},
      "emo4":{trust:-8,safety:-10,message:"Гнев разжигает конфликт!"},
      "default":{trust:-6,morale:-4,message:"Подозрения остаются..."}
    }},
    { name:"Беженцы", portrait:"👨‍👩‍👧", problem:"Изгнание", description:"Нас прогнали. <span class='problem-keyword'>Изгнание</span> — наша судьба.", solutions:{
      "res5":{safety:8,morale:10,trust:8,message:"Убежище даёт приют."},
      "emo6":{morale:12,trust:10,message:"Любовь принимает всех."},
      "soc4":{morale:10,safety:6,message:"Единство объединяет."},
      "default":{morale:-6,trust:-4,message:"Беженцы уходят..."}
    }}
  ]},
  4:{ visitors:[
    { name:"Пророк", portrait:"🔮", problem:"Предсказание", description:"Вижу тьму впереди. <span class='problem-keyword'>Предсказание</span> мрачно.", solutions:{
      "abs4":{morale:-5,trust:8,message:"Судьба принята с достоинством."},
      "emo2":{morale:12,trust:10,message:"Надежда побеждает мрак!"},
      "abs2":{morale:-15,health:-8,message:"Тишина усиливает страх..."},
      "default":{morale:-8,trust:-4,message:"Мрачные предчувствия..."}
    }},
    { name:"Раненый воин", portrait:"🤕", problem:"Рана", description:"Глубокая <span class='problem-keyword'>Рана</span>. Кровь не останавливается.", solutions:{
      "med4":{health:12,trust:8,message:"Перевязка спасает жизнь."},
      "med2":{health:18,trust:12,message:"Исцеление закрывает рану!"},
      "nat7":{health:4,message:"Лёд замедляет кровь."},
      "nat2":{health:-10,trust:-8,message:"Огонь?! Агония!"},
      "default":{health:-10,message:"Рана кровоточит..."}
    }},
    { name:"Культист", portrait:"👤", problem:"Ересь", description:"Слова должны исчезнуть! <span class='problem-keyword'>Ересь</span> — это спасение!", solutions:{
      "soc5":{trust:15,morale:10,message:"Знание развеивает ложь."},
      "soc6":{trust:12,safety:8,message:"Правда разоблачает культ."},
      "abs2":{trust:-20,morale:-15,message:"Тишина... Культист торжествует!"},
      "default":{trust:-8,safety:-6,message:"Ересь распространяется..."}
    }},
    { name:"Умирающий старик", portrait:"👴", problem:"Забвение", description:"Память уходит. <span class='problem-keyword'>Забвение</span> близко.", solutions:{
      "abs5":{morale:15,trust:12,message:"Память возвращается!"},
      "soc5":{morale:12,trust:10,message:"Знание сохраняет разум."},
      "abs1":{morale:8,message:"Время даёт покой."},
      "default":{morale:-8,trust:-4,message:"Забвение побеждает..."}
    }}
  ],
  event:{ type:"discovery", title:"Тайник", description:"В подвале найдены слова:", words:["Врата","Клинок","Печать"], choose:2 } },
  5:{ visitors:[
    { name:"Пророк Безмолвия", portrait:"⚫", problem:"Конец", description:"Пришёл час. <span class='problem-keyword'>Конец</span> всех слов.", solutions:{
      "soc5":{health:25,food:25,safety:25,morale:25,trust:30,message:"Знание побеждает тьму! Мир спасён!"},
      "emo2":{morale:20,trust:15,message:"Надежда создаёт барьер!"},
      "emo6":{health:15,morale:20,trust:15,message:"Любовь защищает!"},
      "abs2":{health:-40,food:-40,safety:-40,morale:-40,trust:-40,message:"Тишина... Конец всего..."},
      "nat2":{safety:-25,health:-20,message:"Огонь уничтожает библиотеку!"},
      "default":{health:-20,food:-20,safety:-20,morale:-20,trust:-20,message:"Тьма поглощает мир..."}
    }},
    { name:"Последние выжившие", portrait:"👥", problem:"Отчаяние", description:"Всё кончено. <span class='problem-keyword'>Отчаяние</span> в сердцах.", solutions:{
      "emo2":{morale:18,trust:12,message:"Надежда возрождается!"},
      "emo5":{morale:15,health:8,message:"Радость возвращает силы."},
      "emo8":{morale:-20,health:-15,message:"Отчаяние усиливает отчаяние!"},
      "default":{morale:-12,health:-8,message:"Отчаяние растёт..."}
    }}
  ]},
  6:{ visitors:[
    { name:"Эпидемия", portrait:"☠️", problem:"Чума", description:"Чёрная смерть. <span class='problem-keyword'>Чума</span> косит всех.", solutions:{
      "med6":{health:15,safety:10,message:"Карантин сдерживает чуму."},
      "med2":{health:20,trust:15,message:"Исцеление спасает многих!"},
      "nat2":{health:-30,safety:-20,message:"Огонь?! Катастрофа!"},
      "default":{health:-15,trust:-8,message:"Чума распространяется..."}
    }}
  ]}
};

/* ===================== УТИЛИТЫ СЕЙВОВ ===================== */
function hasSave(){ return !!localStorage.getItem('librarian_save'); }
function saveGame(){
  const save = {
    mode:gameState.mode, day:gameState.day, stats:gameState.stats,
    usedWords:[...gameState.usedWords], discoveredWords:gameState.discoveredWords,
    canCreateNeologism:gameState.canCreateNeologism, roguelikeScore:gameState.roguelikeScore
  };
  localStorage.setItem('librarian_save', JSON.stringify(save));
}
function continueGame(){
  const raw = localStorage.getItem('librarian_save'); if (!raw) return;
  const data = JSON.parse(raw);
  resetGame();
  Object.assign(gameState, {
    mode:data.mode||'campaign', day:data.day||1, stats:data.stats||{...DEFAULT_STATS},
    usedWords:new Set(data.usedWords||[]), discoveredWords:data.discoveredWords||[],
    canCreateNeologism: data.canCreateNeologism ?? 2, roguelikeScore:data.roguelikeScore||0
  });
  enterGame(); startDay();
}

/* ===================== ИНИЦИАЛИЗАЦИЯ ===================== */
function init(){
  createParticles();
  if (hasSave()) document.getElementById('continue-btn').style.display='block';
  document.getElementById('word-search').addEventListener('input', e=>{
    const active = document.querySelector('.category-tab.active')?.dataset.category || 'all';
    renderWords(active, e.target.value);
  });
  document.addEventListener('keydown', e=>{
    if (e.key==='Escape') closeModal();
    if (e.key>='1' && e.key<='7'){ const idx=parseInt(e.key)-1; if (CATEGORIES[idx]) filterByCategory(CATEGORIES[idx]); }
    if (e.key==='Enter'){
      const btn = document.getElementById('give-word-btn');
      if (btn && !btn.disabled) giveWord();
    }
  });
}
window.addEventListener('DOMContentLoaded', init);

function createParticles(){
  for (let i=0;i<15;i++){
    const p=document.createElement('div'); p.className='ash-particle';
    p.style.left = Math.random()*100 + '%';
    p.style.animationDelay = Math.random()*12 + 's';
    p.style.animationDuration = (10 + Math.random()*8) + 's';
    document.body.appendChild(p);
  }
}

/* ===================== СТАРТ / СБРОС ===================== */
function startCampaign(){ resetGame(); gameState.mode='campaign'; enterGame(); startDay(); }
function startRoguelike(){ resetGame(); gameState.mode='roguelike'; gameState.nightDecay=5; enterGame(); startDay(); }
function resetGame(){
  gameState = {
    mode:'campaign', day:1, stats:{...DEFAULT_STATS}, currentVisitor:null, selectedWord:null,
    visitorsQueue:[], usedWords:new Set(), journal:[], canCreateNeologism:2, discoveredWords:[],
    roguelikeScore:0, ended:false, nightDecay:3, crisisFlags:{epidemic:false,famine:false,unrest:false},
    wordsUsedToday:[], snapshot:{}
  };
}
function enterGame(){
  document.getElementById('main-menu').style.opacity='0';
  setTimeout(()=>{
    document.getElementById('main-menu').style.display='none';
    document.getElementById('game-container').classList.add('visible');
    renderCategories(); renderWords(); updateStats(); updateWordCount();
  }, 1000);
}

/* ===================== ДЕНЬ / КРИЗИСЫ ===================== */
function startDay(){
  // снимок статов
  gameState.snapshot = JSON.parse(JSON.stringify(gameState.stats));
  gameState.wordsUsedToday = [];

  if (gameState.day>1) applyNightDecay();
  checkCrises();

  if (gameState.mode==='campaign'){
    const dayData = campaignEvents[gameState.day];
    if (!dayData){ victory(); return; }
    gameState.visitorsQueue = [...dayData.visitors];

    // кризисные доп. посетители
    if (gameState.crisisFlags.epidemic){
      gameState.visitorsQueue.push({ name:"Больные", portrait:"🤢", problem:"Эпидемия", description:"<span class='problem-keyword'>Эпидемия</span> не отступает!", solutions:{
        "med6":{health:10,message:"Карантин помогает."}, "med2":{health:15,message:"Исцеление спасает больных."}, "default":{health:-8,message:"Болезнь распространяется..."}
      }});
    }
    if (gameState.crisisFlags.famine){
      gameState.visitorsQueue.push({ name:"Голодающие", portrait:"🍞", problem:"Голод", description:"Массовый <span class='problem-keyword'>Голод</span>!", solutions:{
        "res1":{food:10,message:"Хлеб спасает от голода."}, "res3":{food:15,message:"Урожай кормит всех."}, "default":{food:-8,morale:-5,message:"Голод усиливается..."}
      }});
    }
    if (gameState.crisisFlags.unrest){
      gameState.visitorsQueue.push({ name:"Недовольные", portrait:"🗣️", problem:"Беспорядки", description:"Ссоры и драки усиливаются!", solutions:{
        "soc1":{safety:12,morale:8,trust:6,message:"Миротворцы успокаивают спор."}, "soc2":{safety:10,trust:6,message:"Справедливое решение принято."}, "default":{safety:-6,morale:-4,message:"Ругань не смолкает..."}
      }});
    }

    updateDayInfo();
    if (dayData.event) showDiscoveryModal(dayData.event); else showNextVisitor();
  } else {
    generateRoguelikeDay();
  }
}

function applyNightDecay(){
  Object.keys(gameState.stats).forEach(stat=>{
    const decay = Math.floor(Math.random()*gameState.nightDecay)+1;
    gameState.stats[stat] = Math.max(0, gameState.stats[stat]-decay);
  });
  addToJournal(`Ночь прошла тревожно. Поселение ослабло.`);
  updateStats();
  showNotification("Ночные потери: все параметры снижены");
}
function checkCrises(){
  if (gameState.stats.health < 40 && !gameState.crisisFlags.epidemic){ gameState.crisisFlags.epidemic = true; showNotification("⚠️ ЭПИДЕМИЯ началась в поселении!"); }
  if (gameState.stats.food   < 35 && !gameState.crisisFlags.famine)  { gameState.crisisFlags.famine  = true; showNotification("⚠️ ГОЛОД охватил поселение!"); }
  if (gameState.stats.safety < 35 && !gameState.crisisFlags.unrest)  { gameState.crisisFlags.unrest  = true; showNotification("⚠️ БЕСПОРЯДКИ начались!"); }
}
function showNotification(text){
  const n=document.createElement('div'); n.className='event-notification'; n.textContent=text; document.body.appendChild(n); setTimeout(()=>n.remove(), 3000);
}

/* ===================== РОГАЛИК ===================== */
function generateRoguelikeDay(){
  const count = Math.min(2 + Math.floor(gameState.day/2), 5);
  gameState.visitorsQueue = [];
  const problems = [
    { name:"Больной", portrait:"🤒", problem:"Болезнь", stat:"health" },
    { name:"Голодный", portrait:"😔", problem:"Голод",   stat:"food" },
    { name:"Испуганный", portrait:"😰", problem:"Страх", stat:"morale" },
    { name:"Раненый", portrait:"🩸", problem:"Рана",     stat:"health" },
    { name:"Спорщик", portrait:"😤", problem:"Спор",     stat:"safety" }
  ];
  for (let i=0;i<count;i++){
    const p = problems[Math.floor(Math.random()*problems.length)];
    gameState.visitorsQueue.push({
      ...p, description:`Проблема: <span class='problem-keyword'>${p.problem}</span>`, solutions: generateRoguelikeSolutions(p.stat)
    });
  }
  updateDayInfo(); showNextVisitor();
}
function generateRoguelikeSolutions(mainStat){
  const solutions = {};
  const availableWords = [...wordsDatabase, ...gameState.discoveredWords].filter(w=>!gameState.usedWords.has(w.id));
  const picks = availableWords.slice(0, Math.min(5, availableWords.length));
  picks.forEach(word=>{
    const eff = {};
    if (word.category==='medicine' && mainStat==='health') eff.health = 10 + Math.floor(Math.random()*8);
    else if (word.category==='resource' && mainStat==='food') eff.food = 10 + Math.floor(Math.random()*8);
    else if (word.category==='social' && mainStat==='safety') eff.safety = 10 + Math.floor(Math.random()*8);
    else if (word.category==='emotion' && mainStat==='morale') eff.morale = 10 + Math.floor(Math.random()*8);
    else eff[mainStat] = 3 + Math.floor(Math.random()*5);
    eff.message = "Слово помогает.";
    solutions[word.id] = eff;
  });
  solutions.default = { [mainStat]: -5 - Math.floor(Math.random()*5), message:"Проблема усугубляется..." };
  return solutions;
}

/* ===================== UI: ДЕНЬ / ПОСЕТИТЕЛИ ===================== */
function updateDayInfo(){
  document.getElementById('day-number').textContent = gameState.day;
  if (gameState.mode==='roguelike') document.getElementById('day-description').textContent = `Счёт: ${gameState.roguelikeScore}`;
  else {
    const desc = {1:"Первые просители у порога...",2:"Беды множатся, слова тают...",3:"Кризис углубляется...",4:"Тени сгущаются над поселением...",5:"Финальное испытание...",6:"Последняя битва за выживание..."};
    document.getElementById('day-description').textContent = desc[gameState.day] || "История продолжается...";
  }
}
function updateStats(){
  Object.keys(gameState.stats).forEach(stat=>{
    const value = gameState.stats[stat];
    document.getElementById(`${stat}-value`).textContent = value;
    const el = document.querySelector(`[data-stat="${stat}"]`);
    el.querySelector('.stat-fill').style.width = `${value}%`;
    if (value<=10){ el.classList.add('critical'); el.classList.add('warning'); }
    else if (value<=25){ el.classList.remove('critical'); el.classList.add('warning'); }
    else { el.classList.remove('critical'); el.classList.remove('warning'); }
    if (value<=0 && !gameState.ended){ gameOver(stat); }
  });
}
function updateWordCount(){
  const total = wordsDatabase.length + gameState.discoveredWords.length;
  const available = total - gameState.usedWords.size;
  document.getElementById('word-count').textContent = `Доступно: ${available} из ${total}`;
  document.getElementById('neo-count').textContent = gameState.canCreateNeologism;
}

function showNextVisitor(){
  updateQueueIndicator();
  if (gameState.visitorsQueue.length===0){ endDay(); return; }
  const v = gameState.visitorsQueue.shift();
  gameState.currentVisitor = v;

  const box = document.getElementById('visitor-content');
  box.innerHTML = `
    <div class="visitor">
      <div class="visitor-portrait" id="visitor-portrait" onclick="selectVisitor()">${v.portrait}</div>
      <div class="visitor-name">${v.name}</div>
      <div class="visitor-problem">${v.description}</div>
    </div>
  `;

  const portrait = document.getElementById('visitor-portrait');
  portrait.addEventListener('dragover', e=>{ e.preventDefault(); portrait.classList.add('selected'); });
  portrait.addEventListener('drop', e=>{
    e.preventDefault();
    const wordId = e.dataTransfer.getData('text/plain');
    const word = [...wordsDatabase, ...gameState.discoveredWords].find(w=>w.id===wordId);
    if (word && !gameState.usedWords.has(wordId)){
      gameState.selectedWord = word; portrait.classList.add('selected'); giveWord();
    }
  });
  checkCanGiveWord();
}
function selectVisitor(){ document.getElementById('visitor-portrait').classList.add('selected'); checkCanGiveWord(); }
function updateQueueIndicator(){
  const q=document.getElementById('visitors-queue'); q.innerHTML='';
  const total = gameState.visitorsQueue.length + (gameState.currentVisitor?1:0);
  for (let i=0;i<total;i++){ const d=document.createElement('div'); d.className='queue-indicator'; if (i===0 && gameState.currentVisitor) d.classList.add('active'); q.appendChild(d); }
}

/* ===================== UI: СЛОВА ===================== */
function renderCategories(){
  const c=document.getElementById('word-categories'); c.innerHTML='';
  CATEGORIES.forEach(cat=>{
    const tab=document.createElement('div'); tab.className='category-tab'; if (cat==='all') tab.classList.add('active');
    tab.dataset.category = cat; tab.textContent = CATEGORY_NAMES[cat]; tab.onclick = ()=>filterByCategory(cat);
    if (cat!=='all'){ const count=getAvailableWordsInCategory(cat); if (count>0){ const b=document.createElement('span'); b.className='category-count'; b.textContent=count; tab.appendChild(b);} }
    c.appendChild(tab);
  });
}
function getAvailableWordsInCategory(category){
  const all=[...wordsDatabase, ...gameState.discoveredWords];
  return all.filter(w=>w.category===category && !gameState.usedWords.has(w.id)).length;
}
function filterByCategory(category){
  document.querySelectorAll('.category-tab').forEach(t=>t.classList.remove('active'));
  document.querySelector(`[data-category="${category}"]`).classList.add('active');
  renderWords(category);
}
function renderWords(category='all', search=''){
  const container = document.getElementById('words-container');
  const s = (search || document.getElementById('word-search').value || '').toLowerCase();
  let words = [...wordsDatabase, ...gameState.discoveredWords];
  if (category!=='all') words = words.filter(w=>w.category===category);
  if (s) words = words.filter(w=>w.text.toLowerCase().includes(s));
  container.innerHTML = '';
  words.forEach(word=>{
    const el=document.createElement('div'); el.className='word'; el.textContent=word.text; el.dataset.id=word.id;
    if (gameState.discoveredWords.includes(word)) el.classList.add('neologism');
    if (word.tooltip){ const tip=document.createElement('div'); tip.className='word-tooltip'; tip.textContent=word.tooltip; el.appendChild(tip); }
    if (gameState.usedWords.has(word.id)) el.classList.add('used');
    else {
      el.onclick = ()=>selectWord(word);
      el.draggable = true;
      el.addEventListener('dragstart', e=>{ e.dataTransfer.setData('text/plain', word.id); });
    }
    container.appendChild(el);
  });
}
function selectWord(word){
  if (gameState.usedWords.has(word.id)) return;
  document.querySelectorAll('.word').forEach(w=>w.classList.remove('selected'));
  document.querySelector(`.word[data-id="${word.id}"]`)?.classList.add('selected');
  gameState.selectedWord = word; checkCanGiveWord();
}
function checkCanGiveWord(){
  const hasVisitor = !!document.getElementById('visitor-portrait')?.classList.contains('selected');
  const hasWord = !!gameState.selectedWord;
  document.getElementById('give-word-btn').disabled = !(hasVisitor && hasWord);
}

/* ===================== ВЫДАЧА СЛОВА ===================== */
function giveWord(){
  if (!gameState.selectedWord || !gameState.currentVisitor) return;
  const word = gameState.selectedWord;
  const visitor = gameState.currentVisitor;

  createWordEffect(word.text);
  gameState.usedWords.add(word.id);
  gameState.wordsUsedToday.push(word.text);

  const result = (visitor.solutions && (visitor.solutions[word.id] || visitor.solutions.default)) || { health:-3, message:"Слово не помогает..." };
  applyEffects(result);
  showResult(word.text, result.message, result);
  addToJournal(`День ${gameState.day}: "${word.text}" → ${visitor.name}`);

  if (gameState.mode==='roguelike'){
    const positives = Object.keys(result).filter(k=>k!=='message' && result[k]>0).length;
    gameState.roguelikeScore += positives * 10;
  }

  gameState.selectedWord = null; gameState.currentVisitor = null;
  document.getElementById('give-word-btn').disabled = true;
  renderCategories(); renderWords(); updateWordCount();

  setTimeout(()=>showNextVisitor(), 2000);
}
function createWordEffect(text){
  const d=document.createElement('div'); d.className='word-effect'; d.textContent=text; document.body.appendChild(d); setTimeout(()=>d.remove(), 3000);
}
function applyEffects(result){
  Object.keys(gameState.stats).forEach(stat=>{
    if (result[stat]) gameState.stats[stat] = Math.max(0, Math.min(100, gameState.stats[stat] + result[stat]));
  });
  updateStats();
}
function showResult(word, message, effects){
  const div=document.createElement('div'); div.className='result-message';
  const em = {health:'❤️', food:'🌾', safety:'🛡️', morale:'💚', trust:'🤝'};
  let statsHtml = '<div class="stat-changes">';
  Object.keys(effects).forEach(k=>{
    if (k==='message' || !effects[k]) return;
    const cls = effects[k]>0 ? 'positive' : 'negative';
    statsHtml += `<span class="stat-change ${cls}">${em[k]||''} ${effects[k]>0?'+':''}${effects[k]}</span>`;
  });
  statsHtml += '</div>';
  div.innerHTML = `<h3>Использовано: "${word}"</h3><p>${message||''}</p>${statsHtml}`;
  document.body.appendChild(div);
  setTimeout(()=>div.remove(), 2500);
}

/* ===================== ДНЕВНИК / МОДАЛКИ ===================== */
function addToJournal(text){
  gameState.journal.push(text);
  const cont=document.getElementById('journal-content');
  const e=document.createElement('div'); e.className='journal-entry'; e.textContent=text; cont.appendChild(e); cont.scrollTop = cont.scrollHeight;
}
function closeModal(){ document.querySelector('.modal')?.remove(); }

/* ===================== DISCOVERY (находки) ===================== */
let selectedDiscoveries = [];
function showDiscoveryModal(event){
  selectedDiscoveries = [];
  const modal=document.createElement('div'); modal.className='modal';
  modal.innerHTML = `
    <div class="modal-content">
      <h3>${event.title}</h3>
      <p>${event.description}</p>
      <div class="word-selector">
        ${event.words.map(w=>`<div class="word-option" onclick="selectDiscoveredWord(this,'${w}')">${w}</div>`).join('')}
      </div>
      <p>Выберите <b>${event.choose}</b> слов(а)</p>
      <div class="action-buttons" style="margin-top:10px">
        <button class="action-button" onclick="confirmDiscovery(${event.choose})">Подтвердить</button>
        <button class="action-button" onclick="closeModal()">Отмена</button>
      </div>
    </div>`;
  document.body.appendChild(modal);
}
function selectDiscoveredWord(el, word){
  const i = selectedDiscoveries.indexOf(word);
  if (i>-1){ selectedDiscoveries.splice(i,1); el.classList.remove('selected'); }
  else {
    el.classList.add('selected');
    selectedDiscoveries.push(word);
  }
}
function confirmDiscovery(maxCount){
  if (selectedDiscoveries.length !== maxCount){ alert(`Нужно выбрать ровно ${maxCount} слов(а)`); return; }
  selectedDiscoveries.forEach(word=>{
    const newWord = { text:word, category:'abstract', id:'disc_'+Date.now()+'_'+word, tooltip:'Найденное слово' };
    gameState.discoveredWords.push(newWord);
    addToJournal(`Найдено слово: "${word}"`);
  });
  closeModal();
  renderWords(); updateWordCount(); showNextVisitor();
}

/* ===================== НЕОЛОГИЗМЫ ===================== */
let neoSelected = [];
function openNeologismModal(){
  if (gameState.canCreateNeologism<=0){ showResult('','Вы исчерпали силу создания слов',{ }); return; }
  neoSelected = [];
  const available = [...wordsDatabase, ...gameState.discoveredWords].filter(w=>!gameState.usedWords.has(w.id));
  const modal=document.createElement('div'); modal.className='modal';
  modal.innerHTML = `
    <div class="modal-content">
      <h3>Создание неологизма</h3>
      <p>Выберите <b>2–3</b> слова-основы, затем введите название:</p>
      <div class="word-selector">
        ${available.map(w=>`<div class="word-option" onclick="toggleNeoWord(this,'${w.id}')">${w.text}</div>`).join('')}
      </div>
      <input type="text" class="word-search" placeholder="Название нового слова..." id="neo-name" style="margin-top:10px;">
      <div class="action-buttons" style="margin-top:10px">
        <button class="action-button" onclick="createNeologism()">Создать</button>
        <button class="action-button" onclick="closeModal()">Отмена</button>
      </div>
    </div>`;
  document.body.appendChild(modal);
}
function toggleNeoWord(el, id){
  const pool = [...wordsDatabase, ...gameState.discoveredWords];
  const w = pool.find(x=>x.id===id);
  const i = neoSelected.findIndex(x=>x.id===id);
  if (i>-1){ neoSelected.splice(i,1); el.classList.remove('selected'); }
  else { if (neoSelected.length>=3) return; neoSelected.push(w); el.classList.add('selected'); }
}
function createNeologism(){
  const name = document.getElementById('neo-name').value.trim();
  if (!name){ alert('Введите название нового слова'); return; }
  if (neoSelected.length<2){ alert('Выберите минимум 2 слова-основы'); return; }

  // сжечь исходники
  neoSelected.forEach(w=> gameState.usedWords.add(w.id));
  // составить подсказку
  const tooltip = `Создано из: ${neoSelected.map(w=>w.text).join(' + ')}`;
  const newWord = { text:name, category:'abstract', id:'neo_'+Date.now(), tooltip };
  gameState.discoveredWords.push(newWord);
  gameState.canCreateNeologism--;

  closeModal();
  addToJournal(`Создан неологизм: "${name}" (${tooltip})`);
  renderCategories(); renderWords(); updateWordCount();
  showResult(name, `Новое слово «${name}» добавлено в книгу!`, { trust:5 });
}

/* ===================== КОНЕЦ ДНЯ / КОНЦОВКИ ===================== */
function endDay(){
  // сводка
  const delta = {};
  Object.keys(gameState.stats).forEach(k=> delta[k] = (gameState.stats[k]||0) - (gameState.snapshot[k]||0));
  const em = {health:'❤️', food:'🌾', safety:'🛡️', morale:'💚', trust:'🤝'};
  const parts = Object.keys(delta).map(k=> delta[k] ? `${em[k]} ${delta[k]>0?'+':''}${delta[k]}` : '').filter(Boolean);
  const vc = document.getElementById('visitor-content');
  vc.innerHTML = `
    <div style="text-align:center; padding:18px;">
      <h3 style="color:var(--gold); margin-bottom:10px;">День ${gameState.day} завершён</h3>
      <p>Потрачено слов: ${gameState.wordsUsedToday.length}${gameState.wordsUsedToday.length? ' — ' + gameState.wordsUsedToday.join(', ') : ''}</p>
      <p style="margin-top:8px;">Изменения: ${parts.join(' • ') || '—'}</p>
      ${gameState.mode==='roguelike' ? `<p style="margin-top:6px;">Счёт: ${gameState.roguelikeScore}</p>` : ''}
    </div>`;
  document.getElementById('next-day-btn').style.display='block';
  saveGame();
}
function nextDay(){
  document.getElementById('next-day-btn').style.display='none';
  gameState.day++;
  if (gameState.mode==='roguelike'){
    // маленькое дрейфовое ухудшение
    Object.keys(gameState.stats).forEach(k=> gameState.stats[k] = Math.max(0, gameState.stats[k] - Math.floor(Math.random()*4)));
    updateStats();
  }
  startDay();
}
function gameOver(failedStat){
  if (gameState.ended) return; gameState.ended=true;
  const text = { health:"Эпидемия уничтожила поселение…", food:"Голод погубил последних выживших…", safety:"Хаос разрушил общину…", morale:"Люди потеряли волю к жизни…", trust:"Жители изгнали библиотекаря…" }[failedStat] || 'Провал…';
  const d=document.createElement('div'); d.className='game-over';
  d.innerHTML = `
    <div class="game-over-content">
      <h1 class="defeat">КОНЕЦ</h1>
      <p style="font-size:1.2em; margin-bottom:16px;">${text}</p>
      <p>Прожито дней: ${gameState.day}</p>
      <p>Потрачено слов: ${gameState.usedWords.size}</p>
      ${gameState.mode==='roguelike' ? `<p>Счёт: ${gameState.roguelikeScore}</p>` : ''}
      <div class="action-buttons" style="margin-top:14px;">
        <button class="action-button" onclick="location.reload()">НАЧАТЬ ЗАНОВО</button>
      </div>
    </div>`;
  document.body.appendChild(d);
}
function victory(){
  const remaining = wordsDatabase.length + gameState.discoveredWords.length - gameState.usedWords.size;
  let cls='neutral', msg='Поселение выжило…';
  if (remaining>30) { cls='victory'; msg='Вы спасли людей и сохранили язык!'; }
  else if (remaining<10){ cls='defeat'; msg='Выжили, но язык почти утрачен…'; }
  const d=document.createElement('div'); d.className='game-over';
  d.innerHTML = `
    <div class="game-over-content">
      <h1 class="${cls}">${cls==='victory'?'ПОБЕДА!':'КОНЕЦ ИСТОРИИ'}</h1>
      <p style="font-size:1.2em; margin-bottom:16px;">${msg}</p>
      <p>Пройдено дней: ${gameState.day}</p>
      <p>Сохранено слов: ${remaining}</p>
      <div class="action-buttons" style="margin-top:14px;">
        <button class="action-button" onclick="location.reload()">НОВАЯ ИГРА</button>
      </div>
    </div>`;
  document.body.appendChild(d);
}
</script>
</body>
</html>
